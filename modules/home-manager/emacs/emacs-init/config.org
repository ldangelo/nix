
* Initialization


#+begin_src emacs-lisp :tangle yes
(setq warning-minimum-level :emergency)
(setq gc-cons-threshold most-positive-fixnum)


;; Load path
;; Optimize: Force "lisp"" and "site-lisp" at the head to reduce the startup time.
(defun update-load-path (&rest _)
  "Update `load-path'."
  (dolist (dir '("site-lisp" "lisp"))
    (push (expand-file-name dir user-emacs-directory) load-path)))

(defun add-subdirs-to-load-path (&rest _)
  "Add subdirectories to `load-path'.

Don't put large files in `site-lisp' directory, e.g. EAF.
Otherwise the startup will be very slow."
  (let ((default-directory (expand-file-name "site-lisp" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path)))

(advice-add #'package-initialize :after #'update-load-path)
(advice-add #'package-initialize :after #'add-subdirs-to-load-path)

(update-load-path)

#+end_src
* Packate Init
#+begin_src emacs-lisp :tangle yes
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
    	                     ("gnu" . "http://elpa.gnu.org/packages/")
                 ("elpa" . "https://elpa.gnu.org/packages/")))

 (package-initialize)
 (unless package-archive-contents
   (package-refresh-contents))

 ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

 (require 'use-package)
 (setq use-package-always-ensure t
       use-package-enable-imenu-support t)

 (use-package diminish :ensure t)

;; (use-package gnu-elpa-keyring-update)

 (use-package auto-package-update
   :custom
   (auto-package-update-interval 7)
   (auto-package-update-prompt-before-update t)
   (auto-package-update-hide-results t)
   :config
   (auto-package-update-maybe)
   (auto-package-update-at-time "09:00"))

#+end_src

  
* Constants
#+begin_src emacs-lisp :tangle yes
  (setq find-file-visit-truename t)
  (setq custom-file "./custom.el")
  (toggle-debug-on-error)  

#+end_src

* Functions
** Roam
#+begin_src emacs-lisp :tangle yes
    (defun my/org-roam-copy-todo-to-today ()
      (interactive)
      (let ((org-refile-keep t) ;; Set this to nil to delete the original!
            (org-roam-dailies-capture-templates
              '(("t" "tasks" entry "%?"
                 :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
            (org-after-refile-insert-hook #'save-buffer)
            today-file
            pos)
        (save-window-excursion
          (org-roam-dailies--capture (current-time) t)
          (setq today-file (buffer-file-name))
          (setq pos (point)))

        ;; Only refile if the target file is different than the current file
        (unless (equal (file-truename today-file)
                       (file-truename (buffer-file-name)))
          (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* %?"
                                    :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                            ("Tasks"))))))

#+end_src
** General
#+begin_src emacs-lisp :tangle yes

    ;;; describe this point lisp only
      (defun describe-foo-at-point ()
            "Show the documentation of the Elisp function and variable near point.
      This checks in turn:
      -- for a function name where point is
      -- for a variable name where point is
      -- for a surrounding function call
      "
        (interactive)
        (let (sym)
          ;; sigh, function-at-point is too clever.  we want only the first half.
          (cond ((setq sym (ignore-errors
                                 (with-syntax-table emacs-lisp-mode-syntax-table
                                   (save-excursion
                                     (or (not (zerop (skip-syntax-backward "_w")))
                                         (eq (char-syntax (char-after (point))) ?w)
                                         (eq (char-syntax (char-after (point))) ?_)
                                         (forward-sexp -1))
                                     (skip-chars-forward "`'")
                                 (let ((obj (read (current-buffer))))
                                       (and (symbolp obj) (fboundp obj) obj))))))
                     (describe-function sym))
                    ((setq sym (variable-at-point)) (describe-variable sym))
                    ;; now let it operate fully -- i.e. also check the
                    ;; surrounding sexp for a function call.
                    ((setq sym (function-at-point)) (describe-function sym)))))


               (defun vulpea-agenda-category ()
       "Get category of item at point for agenda.

     Category is defined by one of the following items:

     - CATEGORY property
     - TITLE keyword
     - TITLE property
     - filename without directory and extension

     Usage example:

       (setq org-agenda-prefix-format
             '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

     Refer to `org-agenda-prefix-format' for more information."
       (let* ((file-name (when buffer-file-name
                           (file-name-sans-extension
                            (file-name-nondirectory buffer-file-name))))
              (title (vulpea-buffer-prop-get "title"))
              (category (org-get-category)))
         (or (if (and
                  title
                  (string-equal category file-name))
                 title
               category)
             "")))

    (defun centaur-treesit-available-p ()
      "Check whether tree-sitter is available.
    Native tree-sitter is introduced since 29.1."

      (fboundp 'treesit-available-p)
      (treesit-available-p))


    (defun icons-displayable-p ()
      "Return non-nil if icons are displayable."
      (or (featurep 'nerd-icons)
          (require 'nerd-icons nil t)))
    ;; Font
    (defun font-installed-p (font-name)
      "Check if font with FONT-NAME is available."
      (find-font (font-spec :name font-name)))

    ;; Reload configurations
    (defun reload-init-file ()
      "Reload Emacs configurations."
      (interactive)
      (load user-init-file))

    (defalias 'centaur-reload-init-file #'reload-init-file)


    (defun too-long-file-p ()
      "Check whether the file is too long."
      (or (> (buffer-size) 100000)
          (and (fboundp 'buffer-line-statistics)
               (> (car (buffer-line-statistics)) 10000))))



    (defun childframe-workable-p ()
      "Whether childframe is workable."
      (not (or noninteractive
               emacs-basic-display
               (not (display-graphic-p)))))

    (defun childframe-completion-workable-p ()
      "Whether childframe completion is workable."
           (childframe-workable-p))

    (defun create-scratch-buffer ()
      "Create a scratch buffer."
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))


    (defun save-buffer-gbk-as-utf8 ()
      "Revert a buffer with GBK and save as UTF-8."
      (interactive)
      (save-buffer-as-utf8 'gbk))

    (defun byte-compile-elpa ()
      "Compile packages in elpa directory. Useful if you switch Emacs versions."
      (interactive)
      (if (fboundp 'async-byte-recompile-directory)
          (async-byte-recompile-directory package-user-dir)
        (byte-recompile-directory package-user-dir 0 t)))

    (defun byte-compile-site-lisp ()
      "Compile packages in site-lisp directory."
      (interactive)
      (let ((dir (locate-user-emacs-file "site-lisp")))
        (if (fboundp 'async-byte-recompile-directory)
            (async-byte-recompile-directory dir)
          (byte-recompile-directory dir 0 t))))

    (defun native-compile-elpa ()
      "Native-compile packages in elpa directory."
      (interactive)
      (if (fboundp 'native-compile-async)
          (native-compile-async package-user-dir t)))

    (defun native-compile-site-lisp ()
      "Native compile packages in site-lisp directory."
      (interactive)
      (let ((dir (locate-user-emacs-file "site-lisp")))
        (if (fboundp 'native-compile-async)
            (native-compile-async dir t))))

    (defun update-packages ()
      "Refresh package contents and update all packages."
      (interactive)
      (message "Updating packages...")
      (package-upgrade-all)
      (message "Updating packages...done"))
    (defalias 'centaur-update-packages #'update-packages)


    ;; Fonts
    (defun centaur-install-fonts ()
      "Install necessary fonts."
      (interactive)
      (nerd-icons-install-fonts))

    (provide 'init-funcs)

#+end_src


* Base
#+begin_src emacs-lisp :tangle yes
(require 'subr-x)
(require 'init-funcs)

;; Compatibility

;; Garbage Collector Magic Hack
(use-package gcmh
  :diminish
  :hook (emacs-startup . gcmh-mode)
  :init
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold #x1000000)) ; 16MB

;; Start server
(use-package server
  :hook (after-init . server-mode))

;; Save place
(use-package saveplace
  :hook (after-init . save-place-mode))

;; History
(use-package recentf
  :bind (("C-x C-r" . recentf-open-files))
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
              recentf-exclude
              '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
                (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))

(use-package savehist
  :hook (after-init . savehist-mode)
  :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
              history-length 1000
              savehist-additional-variables '(mark-ring
                                              global-mark-ring
                                              search-ring
                                              regexp-search-ring
                                              extended-command-history)
              savehist-autosave-interval 300))

;; Misc.
(use-package simple
  :ensure nil
  :hook ((after-init . size-indication-mode)
         (text-mode . visual-line-mode)
         ((prog-mode markdown-mode conf-mode) . enable-trailing-whitespace))
  :init
  (setq column-number-mode t
        line-number-mode t
        ;; kill-whole-line t               ; Kill line including '\n'
        line-move-visual nil
        track-eol t                     ; Keep cursor at end of lines. Require line-move-visual is nil.
        set-mark-command-repeat-pop t)  ; Repeating C-SPC after popping mark pops it again

  ;; Visualize TAB, (HARD) SPACE, NEWLINE
  (setq-default show-trailing-whitespace nil) ; Don't show trailing whitespace by default
  (defun enable-trailing-whitespace ()
    "Show trailing spaces and delete on saving."
    (setq show-trailing-whitespace t)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  ;; Prettify the process list
  (with-no-warnings
    (defun my-list-processes--prettify ()
      "Prettify process list."
      (when-let ((entries tabulated-list-entries))
        (setq tabulated-list-entries nil)
        (dolist (p (process-list))
          (when-let* ((val (cadr (assoc p entries)))
                      (name (aref val 0))
                      (pid (aref val 1))
                      (status (aref val 2))
                      (status (list status
                                    'face
                                    (if (memq status '(stop exit closed failed))
                                        'error
                                      'success)))
                      (buf-label (aref val 3))
                      (tty (list (aref val 4) 'face 'font-lock-doc-face))
                      (thread (list (aref val 5) 'face 'font-lock-doc-face))
                      (cmd (list (aref val 6) 'face 'completions-annotations)))
            (push (list p (vector name pid status buf-label tty thread cmd))
		          tabulated-list-entries)))))
    (advice-add #'list-processes--refresh :after #'my-list-processes--prettify)))

;; Misc
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (fset 'yes-or-no-p 'y-or-n-p))
(setq-default major-mode 'text-mode
              fill-column 80
              tab-width 4
              indent-tabs-mode nil)     ; Permanently indent with spaces, never with TABs

(setq visible-bell t
      inhibit-compacting-font-caches t  ; Don’t compact font caches during GC
      delete-by-moving-to-trash t       ; Deleting files go to OS's trash folder
      make-backup-files nil             ; Forbide to make backup files
      auto-save-default nil             ; Disable auto save

      uniquify-buffer-name-style 'post-forward-angle-brackets ; Show path if names are same
      adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*"
      adaptive-fill-first-line-regexp "^* *$"
      sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*"
      sentence-end-double-space nil
      word-wrap-by-category t)

;; Frame
(when (display-graphic-p)
  (bind-key "S-s-<return>" #'toggle-frame-fullscreen)
  (bind-key "C-s-f" #'toggle-frame-fullscreen))

  ;; Resize and re-position frames conveniently
  ;; Same keybindings as Rectangle on macOS
  (bind-keys ("C-M-<return>"    . centaur-frame-maximize)
             ("C-M-<backspace>" . centaur-frame-restore)
             ("C-M-<left>"      . centaur-frame-left-half)
             ("C-M-<right>"     . centaur-frame-right-half)
             ("C-M-<up>"        . centaur-frame-top-half)
             ("C-M-<down>"      . centaur-frame-bottom-half))

  ;; Frame transparence
  (use-package transwin
    :bind (("C-M-9" . transwin-inc)
           ("C-M-8" . transwin-dec)
           ("C-M-7" . transwin-toggle)))


;; Global keybindings
(bind-keys ("s-r"     . revert-this-buffer)
           ("C-x K"   . delete-this-file)
           ("C-c C-l" . reload-init-file))

;; Sqlite
(when (fboundp 'sqlite-open)
  (use-package emacsql-sqlite-builtin))


#+end_src
* General
#+begin_src emacs-lisp :tangle yes
  (use-package general
  :demand t
  :ensure t)
#+end_src
* Hydra
#+begin_src emacs-lisp :tangle yes

  (use-package hydra
    :hook (emacs-lisp-mode . hydra-add-imenu)
    :init
    (setq hydra-hint-display-type 'posframe)

    (with-eval-after-load 'posframe
      (defun hydra-set-posframe-show-params ()
        "Set hydra-posframe style."
        (setq hydra-posframe-show-params
              `(:left-fringe 8
                :right-fringe 8
                :internal-border-width 2
                :internal-border-color ,(face-background 'posframe-border nil t)
                :background-color ,(face-background 'tooltip nil t)
                :foreground-color ,(face-foreground 'tooltip nil t)
                :lines-truncate t
                :poshandler posframe-poshandler-frame-center-near-bottom))
        (hydra-set-posframe-show-params)
        (add-hook 'after-load-theme-hook #'hydra-set-posframe-show-params t))))


  (use-package pretty-hydra
    :custom (pretty-hydra-default-title-body-format-spec " %s%s")
    :bind ("<f6>" . toggles-hydra/body)
    :hook (emacs-lisp-mode . (lambda ()
                               (add-to-list
                                'imenu-generic-expression
                                '("Hydras"
                                  "^.*(\\(pretty-hydra-define\\) \\([a-zA-Z-]+\\)"
                                  2))))
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                        &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:inherit highlight :reverse-video t)))
            (height (or height 1.2))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (icons-displayable-p) icon-type icon-name)
           (let ((f (intern (format "nerd-icons-%s" icon-type))))
             (when (fboundp f)
               (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                " "))))
         (propertize title 'face face)))))

  ;; Global toggles
  (with-no-warnings
    (pretty-hydra-define toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "nf-fa-toggle_on")
                                               :color amaranth :quit-key ("q" "C-g"))
      ("Basic"
       (("n" (cond ((fboundp 'display-line-numbers-mode)
                    (display-line-numbers-mode (if display-line-numbers-mode -1 1)))
                   ((fboundp 'gblobal-linum-mode)
                    (global-linum-mode (if global-linum-mode -1 1))))
         "line number"
         :toggle (or (bound-and-true-p display-line-numbers-mode)
                     (bound-and-true-p global-linum-mode)))
        ("a" global-aggressive-indent-mode "aggressive indent" :toggle t)
        ("d" global-hungry-delete-mode "hungry delete" :toggle t)
        ("e" electric-pair-mode "electric pair" :toggle t)
        ("c" flyspell-mode "spell check" :toggle t)
        ("s" prettify-symbols-mode "pretty symbol" :toggle t)
        ("l" global-page-break-lines-mode "page break lines" :toggle t)
        ("b" display-battery-mode "battery" :toggle t)
        ("i" display-time-mode "time" :toggle t)
        ("m" doom-modeline-mode "modern mode-line" :toggle t))
       "Highlight"
       (("h l" global-hl-line-mode "line" :toggle t)
        ("h p" show-paren-mode "paren" :toggle t)
        ("h s" symbol-overlay-mode "symbol" :toggle t)
        ("h r" rainbow-mode "rainbow" :toggle t)
        ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
         "whitespace" :toggle show-trailing-whitespace)
        ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
        ("h i" highlight-indent-guides-mode "indent" :toggle t)
        ("h t" global-hl-todo-mode "todo" :toggle t))
       "Program"
       (("f" flymake-mode "flymake" :toggle t)
        ("O" hs-minor-mode "hideshow" :toggle t)
        ("u" subword-mode "subword" :toggle t)
        ("W" which-function-mode "which function" :toggle t)
        ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
        ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
        ("v" global-diff-hl-mode "gutter" :toggle t)
        ("V" diff-hl-flydiff-mode "live gutter" :toggle t)
        ("M" diff-hl-margin-mode "margin gutter" :toggle t)
        ("D" diff-hl-Dired-mode "dired gutter" :toggle t)))))

#+end_src
* Major Mode Hydra
#+begin_src emacs-lisp :tangle yes
  (use-package major-mode-hydra
    :after evil
    :ensure t
    :bind
       ("C-," . major-mode-hydra))
#+end_src
* Helpful
#+begin_src emacs-lisp :tangle yes
     (use-package helpful
     :config
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command))
#+end_src
* OSX
#+begin_src emacs-lisp :tangle yes
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)))

      (use-package compat :demand t)

          ;; Compatible with Emacs Mac port
          (setq mac-option-modifier 'meta
                mac-command-modifier 'super)
          (bind-keys ([(super a)] . mark-whole-buffer)
                     ([(super c)] . kill-ring-save)
                     ([(super l)] . goto-line)
                     ([(super q)] . save-buffers-kill-emacs)
                     ([(super s)] . save-buffer)
                     ([(super v)] . yank)
                     ([(super w)] . delete-frame)
                     ([(super z)] . undo))

      ;;(setq mac-command-modifier 'meta)
      ;;(setq mac-option-modifier 'none)
      (setq mouse-wheel-scroll-amount '(1
                                        ((sshift .5)
                                         ((control)))))


      (provide 'init-osx)

#+end_src
* UI
#+begin_src emacs-lisp :tangle yes
  ;; Optimization
  (setq idle-update-delay 1.0)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  (setq fast-but-imprecise-scrolling t)
  (setq redisplay-skip-fontification-on-input t)

  ;; Inhibit resizing frame
  (setq frame-inhibit-implied-resize t
        frame-resize-pixelwise t)

  ;; Initial frame
  (setq initial-frame-alist '((top . 0.5)
                              (left . 0.5)
                              (width . 0.628)
                              (height . 0.8)
                              (fullscreen)))

    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (add-hook 'server-after-make-frame-hook
              (lambda ()
                (if (display-graphic-p)
                    (menu-bar-mode 1))))

  ;; Mode-line
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    (setq ;; doom-modeline-icon centaur-icon
          doom-modeline-minor-modes t)
    :bind (:map doom-modeline-mode-map
           ("C-<f6>" . doom-modeline-hydra/body))
    :pretty-hydra
    ((:title (pretty-hydra-title "Mode Line" 'sucicon "nf-custom-emacs" :face 'nerd-icons-purple)
      :color amaranth :quit-key ("q" "C-g"))
     ("Icon"
      (("i" (setq doom-modeline-icon (not doom-modeline-icon))
        "display icons" :toggle doom-modeline-icon)
       ("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
        "unicode fallback" :toggle doom-modeline-unicode-fallback)
       ("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
        "major mode" :toggle doom-modeline-major-mode-icon)
       ("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
        "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
       ("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
        "buffer state" :toggle doom-modeline-buffer-state-icon)
       ("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
        "modification" :toggle doom-modeline-buffer-modification-icon)
       ("x" (setq doom-modeline-time-icon (not doom-modeline-time-icon))
        "time" :toggle doom-modeline-time-icon)
       ("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
        "modal" :toggle doom-modeline-modal-icon))
      "Segment"
      (("g h" (setq doom-modeline-hud (not doom-modeline-hud))
        "hud" :toggle doom-modeline-hud)
       ("g m" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
        "minor modes" :toggle doom-modeline-minor-modes)
       ("g w" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
        "word count" :toggle doom-modeline-enable-word-count)
       ("g e" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
        "encoding" :toggle doom-modeline-buffer-encoding)
       ("g i" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
        "indent" :toggle doom-modeline-indent-info)
       ("g c" (setq doom-modeline-display-misc-in-all-mode-lines (not doom-modeline-display-misc-in-all-mode-lines))
        "misc info" :toggle doom-modeline-display-misc-in-all-mode-lines)
       ("g l" (setq doom-modeline-lsp (not doom-modeline-lsp))
        "lsp" :toggle doom-modeline-lsp)
       ("g k" (setq doom-modeline-workspace-name (not doom-modeline-workspace-name))
        "workspace" :toggle doom-modeline-workspace-name)
       ("g g" (setq doom-modeline-github (not doom-modeline-github))
        "github" :toggle doom-modeline-github)
       ("g n" (setq doom-modeline-gnus (not doom-modeline-gnus))
        "gnus" :toggle doom-modeline-gnus)
       ("g u" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
        "mu4e" :toggle doom-modeline-mu4e)
       ("g r" (setq doom-modeline-irc (not doom-modeline-irc))
        "irc" :toggle doom-modeline-irc)
       ("g f" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
        "irc buffers" :toggle doom-modeline-irc-buffers)
       ("g s" (progn
                (setq doom-modeline-check-simple-format (not doom-modeline-check-simple-format))
                (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
        "simple check format" :toggle doom-modeline-check-simple-format)
       ("g t" (setq doom-modeline-time (not doom-modeline-time))
        "time" :toggle doom-modeline-time)
       ("g v" (setq doom-modeline-env-version (not doom-modeline-env-version))
        "version" :toggle doom-modeline-env-version))
      "Style"
      (("a" (setq doom-modeline-buffer-file-name-style 'auto)
        "auto"
        :toggle (eq doom-modeline-buffer-file-name-style 'auto))
       ("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
        "buffer name"
        :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
       ("f" (setq doom-modeline-buffer-file-name-style 'file-name)
        "file name"
        :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
       ("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
        "truncate upto project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
       ("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
        "truncate from project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
       ("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
        "truncate with project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
       ("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
        "truncate except project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
       ("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
        "truncate upto root"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
       ("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
        "truncate all"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
       ("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
        "truncate none"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
       ("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
        "relative from project"
        :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
       ("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
        "relative to project"
        :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
      "Project Detection"
      (("p a" (setq doom-modeline-project-detection 'auto)
        "auto"
        :toggle (eq doom-modeline-project-detection 'auto))
       ("p f" (setq doom-modeline-project-detection 'ffip)
        "ffip"
        :toggle (eq doom-modeline-project-detection 'ffip))
  ;;     ("p i" (setq doom-modeline-project-detection 'projectile)
  ;;      "projectile"
  ;;      :toggle (eq doom-modeline-project-detection 'projectile))
       ("p p" (setq doom-modeline-project-detection 'project)
        "project"
        :toggle (eq doom-modeline-project-detection 'project))
       ("p n" (setq doom-modeline-project-detection nil)
        "disable"
        :toggle (eq doom-modeline-project-detection nil)))
      "Misc"
      (("n" (progn
              (message "Fetching GitHub notifications...")
              (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
              (browse-url "https://github.com/notifications"))
        "github notifications" :exit t)
       ("e" (cond ((bound-and-true-p flycheck-mode)
                   (flycheck-list-errors))
                  ((bound-and-true-p flymake-mode)
                   (flymake-show-diagnostics-buffer)))
        "list errors" :exit t)
       ("w" (if (bound-and-true-p grip-mode)
                (grip-browse-preview)
              (message "Not in preview"))
        "browse preview" :exit t)
       ("z h" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-height
                       (symbol-value 'doom-modeline-height)))
        "set height" :exit t)
       ("z w" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-bar-width
                       (symbol-value 'doom-modeline-bar-width)))
        "set bar width" :exit t)
       ("z g" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-github-interval
                       (symbol-value 'doom-modeline-github-interval)))
        "set github interval" :exit t)
       ("z n" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-gnus-timer
                       (symbol-value 'doom-modeline-gnus-timer)))
        "set gnus interval" :exit t)))))

  (use-package hide-mode-line
    :hook (((treemacs-mode
             eshell-mode shell-mode
             term-mode vterm-mode
             embark-collect-mode
             lsp-ui-imenu-mode
             pdf-annot-list-mode) . turn-on-hide-mode-line-mode)
           (dired-mode . (lambda()
                           (and (bound-and-true-p hide-mode-line-mode)
                                (turn-off-hide-mode-line-mode))))))

  ;; A minor-mode menu for mode-line
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  ;; Icons
  (use-package nerd-icons
    :config
    (when (and (display-graphic-p)
               (not (font-installed-p nerd-icons-font-family)))
      (nerd-icons-install-fonts t)))

  ;; Show line numbers
  (use-package display-line-numbers
    :ensure nil
    :hook ((prog-mode yaml-mode conf-mode) . display-line-numbers-mode)
    :init (setq display-line-numbers-width-start t))

  ;; Suppress GUI features
  (setq use-file-dialog nil
        use-dialog-box nil
        inhibit-startup-screen t
        inhibit-startup-echo-area-message user-login-name
        inhibit-default-init t
        initial-scratch-message nil)
  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

  ;; Display dividers between windows
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)
  (add-hook 'window-setup-hook #'window-divider-mode)

  ;; Easily adjust the font size in all frames
  (use-package default-text-scale
    :hook (after-init . default-text-scale-mode)
    :bind (:map default-text-scale-mode-map
           ("s-="   . default-text-scale-increase)
           ("s--"   . default-text-scale-decrease)
           ("s-0"   . default-text-scale-reset)
           ("C-s-=" . default-text-scale-increase)
           ("C-s--" . default-text-scale-decrease)
           ("C-s-0" . default-text-scale-reset)))

  ;; Display time
  (use-package time
    :init (setq display-time-default-load-average nil
                display-time-format "%H:%M"))

  ;; Mouse & Smooth Scroll
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
          mouse-wheel-scroll-amount-horizontal 1
          mouse-wheel-progressive-speed nil))
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000
        auto-window-vscroll nil
        scroll-preserve-screen-position t)

  ;; Good pixel line scrolling
  (if (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode t)

    (use-package good-scroll
      :diminish
      :hook (after-init . good-scroll-mode)
      :bind (([remap next] . good-scroll-up-full-screen)
             ([remap prior] . good-scroll-down-full-screen))))

  ;; Smooth scrolling over images
    (use-package iscroll
      :diminish
      :hook (image-mode . iscroll-mode))

  ;; Use fixed pitch where it's sensible
  (use-package mixed-pitch
    :diminish)

  ;; Display ugly ^L page breaks as tidy horizontal lines
  (use-package page-break-lines
    :diminish
    :hook (after-init . global-page-break-lines-mode))

  ;; Child frame
  (when (childframe-workable-p)
    (use-package posframe
      :hook (after-load-theme . posframe-delete-all)
      :init
      (defface posframe-border
        `((t (:inherit region)))
        "Face used by the `posframe' border."
        :group 'posframe)
      (defvar posframe-border-width 2
        "Default posframe border width.")
      :config
      (with-no-warnings
        (defun my-posframe--prettify-frame (&rest _)
          (set-face-background 'fringe nil posframe--frame))
        (advice-add #'posframe--create-posframe :after #'my-posframe--prettify-frame)

        (defun posframe-poshandler-frame-center-near-bottom (info)
          (cons (/ (- (plist-get info :parent-frame-width)
                      (plist-get info :posframe-width))
                   2)
                (/ (+ (plist-get info :parent-frame-height)
                      (* 2 (plist-get info :font-height)))
                   2))))))

  (with-no-warnings

    ;; Render thinner fonts
    (setq ns-use-thin-smoothing t)
    ;; Don't open a file in a new frame
    (setq ns-pop-up-frames nil))



  ;; Ligatures support

  (use-package composite
    :ensure nil
    :init (defvar composition-ligature-table (make-char-table nil))
    :hook (((prog-mode
             conf-mode nxml-mode markdown-mode help-mode
             shell-mode eshell-mode term-mode vterm-mode)
            . (lambda () (setq-local composition-function-table composition-ligature-table))))
    :config
    ;; support ligatures, some toned down to prevent hang
    (let ((alist
           '((33  . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
             (35  . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
             (36  . ".\\(?:\\(>\\)>?\\)")
             (37  . ".\\(?:\\(%\\)%?\\)")
             (38  . ".\\(?:\\(&\\)&?\\)")
             (42  . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
             ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
             (43  . ".\\(?:\\([>]\\)>?\\)")
             ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
             (45  . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
             ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
             (46  . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
             (47  . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
             ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
             (48  . ".\\(?:x[a-zA-Z]\\)")
             (58  . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
             (59  . ".\\(?:\\(;\\);?\\)")
             (60  . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
             (61  . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
             (62  . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
             (63  . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
             (91  . ".\\(?:\\(|\\)[]|]?\\)")
             ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
             (94  . ".\\(?:\\(=\\)=?\\)")
             (95  . ".\\(?:\\(|_\\|[_]\\)_?\\)")
             (119 . ".\\(?:\\(ww\\)w?\\)")
             (123 . ".\\(?:\\(|\\)[|}]?\\)")
             (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
             (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
      (dolist (char-regexp alist)
        (set-char-table-range composition-ligature-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring]))))
    (set-char-table-parent composition-ligature-table composition-function-table))

  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 150)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 150)

  ;; Set the variable pitch face
;;  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 150 :weight 'regular)

  (provide 'init-ui)

#+end_src
* Theme
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :after all-the-icons
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dark+ t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-dark+") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src
* Edit
#+begin_src emacs-lisp :tangle yes
  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))

  ;; Rectangle
  (use-package rect
    :ensure nil
    :bind (:map text-mode-map
                ("<C-return>" . rect-hydra/body)
                :map prog-mode-map
                ("<C-return>" . rect-hydra/body))
    :init
    (with-eval-after-load 'org
      (bind-key "<s-return>" #'rect-hydra/body org-mode-map))
    (with-eval-after-load 'wgrep
      (bind-key "<C-return>" #'rect-hydra/body wgrep-mode-map))
    (with-eval-after-load 'wdired
      (bind-key "<C-return>" #'rect-hydra/body wdired-mode-map))
    :pretty-hydra
    ((:title (pretty-hydra-title "Rectangle" 'mdicon "nf-md-border_all")
             :color amaranth :body-pre (rectangle-mark-mode) :post (deactivate-mark) :quit-key ("q" "C-g"))
     ("Move"
      (("h" backward-char "←")
       ("j" next-line "↓")
       ("k" previous-line "↑")
       ("l" forward-char "→"))
      "Action"
      (("w" copy-rectangle-as-kill "copy") ; C-x r M-w
       ("y" yank-rectangle "yank")         ; C-x r y
       ("t" string-rectangle "string")     ; C-x r t
       ("d" kill-rectangle "kill")         ; C-x r d
       ("c" clear-rectangle "clear")       ; C-x r c
       ("o" open-rectangle "open"))        ; C-x r o
      "Misc"
      (("N" rectangle-number-lines "number lines")        ; C-x r N
       ("e" rectangle-exchange-point-and-mark "exchange") ; C-x C-x
       ("u" undo "undo")
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1))
        "reset")))))

  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))

  ;; Pass a URL to a WWW browser
  (use-package browse-url
    :ensure nil
    :defines dired-mode-map
    :bind (("C-c C-z ." . browse-url-at-point)
           ("C-c C-z b" . browse-url-of-buffer)
           ("C-c C-z r" . browse-url-of-region)
           ("C-c C-z u" . browse-url)
           ("C-c C-z e" . browse-url-emacs)
           ("C-c C-z v" . browse-url-of-file))
    :init
    (with-eval-after-load 'dired
      (bind-key "C-c C-z f" #'browse-url-of-file dired-mode-map)))

  ;; Click to browse URL or to send to e-mail address
  (use-package goto-addr
    :ensure nil
    :hook ((text-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode)))

  ;; Jump to things in Emacs tree-style
  (use-package avy
    :bind (("C-:"   . avy-goto-char)
           ("C-'"   . avy-goto-char-2)
           ("M-g l" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0))
    :hook (after-init . avy-setup-default)
    :config (setq avy-all-windows nil
                  avy-all-windows-alt t
                  avy-background t
                  avy-style 'pre))

  ;; Kill text between the point and the character CHAR
  (use-package avy-zap
    :bind (("M-z" . avy-zap-to-char-dwim)
           ("M-Z" . avy-zap-up-to-char-dwim)))

  ;; Quickly follow links
  (use-package link-hint
    :bind (("M-o" . link-hint-open-link)
           ("C-c l o" . link-hint-open-link)
           ("C-c l c" . link-hint-copy-link)))

  ;;  mode to aggressively keep your code always indented
  (use-package aggressive-indent
    :diminish
    :hook ((after-init . global-aggressive-indent-mode)
           ;; NOTE: Disable in large files due to the performance issues
           ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
           (find-file . (lambda ()
                          (when (too-long-file-p)
                            (aggressive-indent-mode -1)))))
    :config
    ;; Disable in some modes
    (dolist (mode '(gitconfig-mode
                    asm-mode web-mode html-mode css-mode
                    go-mode scala-mode
                    shell-mode term-mode vterm-mode
                    prolog-inferior-mode))
      (add-to-list 'aggressive-indent-excluded-modes mode))

    ;; Disable in some commands
    (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)

    ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p 'c-mode 'c++-mode 'csharp-mode
                                       'java-mode 'go-mode 'swift-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           (thing-at-point 'line))))))

  ;; Show number of matches in mode-line while searching
  (use-package anzu
    :diminish
    :bind (([remap query-replace] . anzu-query-replace)
           ([remap query-replace-regexp] . anzu-query-replace-regexp)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
    :hook (after-init . global-anzu-mode))

  ;; Redefine M-< and M-> for some modes
  (use-package beginend
    :diminish beginend-global-mode
    :hook (after-init . beginend-global-mode)
    :config (mapc (lambda (pair)
                    (diminish (cdr pair)))
                  beginend-modes))

  ;; A comprehensive visual interface to diff & patch
  (use-package ediff
    :ensure nil
    :hook(;; show org ediffs unfolded
          (ediff-prepare-buffer . outline-show-all)
          ;; restore window layout when done
          (ediff-quit . winner-undo))
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          ediff-merge-split-window-function 'split-window-horizontally))

  ;; Automatic parenthesis pairing
  (use-package elec-pair
    :ensure nil
    :hook (after-init . electric-pair-mode)
    :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))

  ;; Visual `align-regexp'
  (use-package ialign)

  ;; Edit multiple regions in the same way simultaneously
  (use-package iedit
    :defines desktop-minor-mode-table
    :bind (("C-;" . iedit-mode)
           ("C-x r RET" . iedit-rectangle-mode)
           :map isearch-mode-map ("C-;" . iedit-mode-from-isearch)
           :map esc-map ("C-;" . iedit-execute-last-modification)
           :map help-map ("C-;" . iedit-mode-toggle-on-function))
    :config
    ;; Avoid restoring `iedit-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(iedit-mode nil))))

  ;; Increase selected region by semantic units
  (use-package expand-region
    :bind ("C-=" . er/expand-region)
    :config
    (when (centaur-treesit-available-p)
      (defun treesit-mark-bigger-node ()
        "Use tree-sitter to mark regions."
        (let* ((root (treesit-buffer-root-node))
               (node (treesit-node-descendant-for-range root (region-beginning) (region-end)))
               (node-start (treesit-node-start node))
               (node-end (treesit-node-end node)))
          ;; Node fits the region exactly. Try its parent node instead.
          (when (and (= (region-beginning) node-start) (= (region-end) node-end))
            (when-let ((node (treesit-node-parent node)))
              (setq node-start (treesit-node-start node)
                    node-end (treesit-node-end node))))
          (set-mark node-end)
          (goto-char node-start)))
      (add-to-list 'er/try-expand-list 'treesit-mark-bigger-node)))

  ;; Multiple cursors
  (use-package multiple-cursors
    :bind (("C-c m" . multiple-cursors-hydra/body)
           ("C-S-c C-S-c"   . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("C-M->"         . mc/skip-to-next-like-this)
           ("C-M-<"         . mc/skip-to-previous-like-this)
           ("s-<mouse-1>"   . mc/add-cursor-on-click)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           :map mc/keymap
           ("C-|" . mc/vertical-align-with-space))
    :pretty-hydra
    ((:title (pretty-hydra-title "Multiple Cursors" 'mdicon "nf-md-cursor_move")
             :color amaranth :quit-key ("q" "C-g"))
     ("Up"
      (("p" mc/mark-previous-like-this "prev")
       ("P" mc/skip-to-previous-like-this "skip")
       ("M-p" mc/unmark-previous-like-this "unmark")
       ("|" mc/vertical-align "align with input CHAR"))
      "Down"
      (("n" mc/mark-next-like-this "next")
       ("N" mc/skip-to-next-like-this "skip")
       ("M-n" mc/unmark-next-like-this "unmark"))
      "Misc"
      (("l" mc/edit-lines "edit lines" :exit t)
       ("a" mc/mark-all-like-this "mark all" :exit t)
       ("s" mc/mark-all-in-region-regexp "search" :exit t)
       ("<mouse-1>" mc/add-cursor-on-click "click"))
      "% 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")"
      (("0" mc/insert-numbers "insert numbers" :exit t)
       ("A" mc/insert-letters "insert letters" :exit t)))))

  ;; Smartly select region, rectangle, multi cursors
  (use-package smart-region
    :hook (after-init . smart-region-on))

  ;; On-the-fly spell checker
  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "aspell")
    :hook (((text-mode outline-mode) . flyspell-mode)
           ;; (prog-mode . flyspell-prog-mode)
           (flyspell-mode . (lambda ()
                              (dolist (key '("C-;" "C-," "C-."))
                                (unbind-key key flyspell-mode-map)))))
    :init (setq flyspell-issue-message-flag nil
                ispell-program-name "aspell"
                ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))

  ;; Hungry deletion
  (use-package hungry-delete
    :diminish
    :hook (after-init . global-hungry-delete-mode)
    :init (setq hungry-delete-chars-to-skip " \t\f\v"
                hungry-delete-except-modes
                '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode)))

  ;; Move to the beginning/end of line or code
  (use-package mwim
    :bind (([remap move-beginning-of-line] . mwim-beginning)
           ([remap move-end-of-line] . mwim-end)))

  (use-package undo-tree
    :diminish
    :hook (after-init . global-undo-tree-mode)
    :init (setq undo-tree-visualizer-timestamps t
                undo-tree-visualizer-diff t
                undo-tree-enable-undo-in-region nil
                undo-tree-auto-save-history t)

    ;; Prevent undo tree files from polluting your git repo
    (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo"))))

        ;; ;; Goto last change
        (use-package goto-chg
          :bind ("C-," . goto-last-change))

        ;; Handling capitalized subwords in a nomenclature
        (use-package subword
          :ensure nil
          :diminish
          :hook ((prog-mode . subword-mode)
                 (minibuffer-setup . subword-mode)))

        ;; Flexible text folding
        (use-package hideshow
          :ensure nil
          :diminish hs-minor-mode
          :pretty-hydra
          ((:title (pretty-hydra-title "HideShow" 'octicon "nf-oct-fold")
            :color amaranth :quit-key ("q" "C-g"))
           ("Fold"
            (("t" hs-toggle-all "toggle all")
             ("a" hs-show-all "show all")
             ("i" hs-hide-all "hide all")
             ("g" hs-toggle-hiding "toggle hiding")
             ("c" hs-cycle "cycle block")
             ("s" hs-show-block "show block")
             ("h" hs-hide-block "hide block")
             ("l" hs-hide-level "hide level"))
            "Move"
            (("C-a" mwim-beginning-of-code-or-line "⭰")
             ("C-e" mwim-end-of-code-or-line "⭲")
             ("C-b" backward-char "←")
             ("C-n" next-line "↓")
             ("C-p" previous-line "↑")
             ("C-f" forward-char "→")
             ("C-v" pager-page-down "↘")
             ("M-v" pager-page-up "↖")
             ("M-<" beginning-of-buffer "⭶")
             ("M->" end-of-buffer "⭸"))))
          :bind (:map hs-minor-mode-map
                 ("C-~" . hideshow-hydra/body)
                 ("C-S-<escape>" . hideshow-hydra/body))
          :hook (prog-mode . hs-minor-mode)
          :config
          ;; More functions
          ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
          (defun hs-cycle (&optional level)
            (interactive "p")
            (let (message-log-max
                  (inhibit-message t))
              (if (= level 1)
                  (pcase last-command
                    ('hs-cycle
                     (hs-hide-level 1)
                     (setq this-command 'hs-cycle-children))
                    ('hs-cycle-children
                     (save-excursion (hs-show-block))
                     (setq this-command 'hs-cycle-subtree))
                    ('hs-cycle-subtree
                     (hs-hide-block))
                    (_
                     (if (not (hs-already-hidden-p))
                         (hs-hide-block)
                       (hs-hide-level 1)
                       (setq this-command 'hs-cycle-children))))
                (hs-hide-level level)
                (setq this-command 'hs-hide-level))))

          (defun hs-toggle-all ()
            "Toggle hide/show all."
            (interactive)
            (pcase last-command
              ('hs-toggle-all
               (save-excursion (hs-show-all))
               (setq this-command 'hs-global-show))
              (_ (hs-hide-all))))

          ;; Display line counts
          (defun hs-display-code-line-counts (ov)
            "Display line counts when hiding codes."
            (when (eq 'code (overlay-get ov 'hs))
              (overlay-put ov 'display
                           (concat
                            " "
                            (propertize
                             (if (char-displayable-p ?⏷) "⏷" "...")
                             'face 'shadow)
                            (propertize
                             (format " (%d lines)"
                                     (count-lines (overlay-start ov)
                                                  (overlay-end ov)))
                             'face '(:inherit shadow :height 0.8))
                            " "))))
          (setq hs-set-up-overlay #'hs-display-code-line-counts))


        ;; Open files as another user
        (use-package sudo-edit)

        (provide 'init-edit)

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;; init-edit.el ends here

#+end_src
* Completion
#+begin_src emacs-lisp :tangle yes

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Only list the commands of the current modes
    (when (boundp 'read-extended-command-predicate)
      (setq read-extended-command-predicate
            #'command-completion-default-include-p))

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))

  ;; Support Pinyin
  (use-package pinyinlib
    :after orderless
    :autoload pinyinlib-build-regexp-string
    :init
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))

  (use-package vertico
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook ((after-init . vertico-mode)
           (rfn-eshadow-update-overlay . vertico-directory-tidy)))

  (when (childframe-completion-workable-p)
    (use-package vertico-posframe
      :hook (vertico-mode . vertico-posframe-mode)
      :init (setq vertico-posframe-poshandler
                  #'posframe-poshandler-frame-center-near-bottom
                  vertico-posframe-parameters
                  '((left-fringe  . 8)
                    (right-fringe . 8)))))

  (use-package nerd-icons-completion
    :when (icons-displayable-p)
    :hook (vertico-mode . nerd-icons-completion-mode))

  (use-package marginalia
    :hook (after-init . marginalia-mode))

  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h"   . consult-history)
           ("C-c k"   . consult-kmacro)
           ("C-c m"   . consult-man)
           ("C-c i"   . consult-info)
           ("C-c r"   . consult-ripgrep)
           ("C-c T"   . consult-theme)
           ("C-."     . consult-imenu)

           ("C-c c e" . consult-colors-emacs)
           ("C-c c w" . consult-colors-web)
           ("C-c c f" . describe-face)
           ("C-c c t" . consult-theme)

           ([remap Info-search]        . consult-info)
           ([remap isearch-forward]    . consult-line)
           ([remap isearch-backward]   . consult-line)
           ([remap recentf-open-files] . consult-recent-file)

           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#"     . consult-register-load)
           ("M-'"     . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#"   . consult-register)
           ;; Other custom bindings
           ("M-y"     . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e"   . consult-compile-error)
           ("M-g f"   . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g"   . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o"   . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m"   . consult-mark)
           ("M-g k"   . consult-global-mark)
           ("M-g i"   . consult-imenu)
           ("M-g I"   . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d"   . consult-find)
           ("M-s D"   . consult-locate)
           ("M-s g"   . consult-grep)
           ("M-s G"   . consult-git-grep)
           ("M-s r"   . consult-ripgrep)
           ("M-s l"   . consult-line)
           ("M-s L"   . consult-line-multi)
           ("M-s k"   . consult-keep-lines)
           ("M-s u"   . consult-focus-lines)
           ;; Isearch integration
           ("M-s e"   . consult-isearch-history)
           :map isearch-mode-map
           ("M-e"     . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s e"   . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l"   . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L"   . consult-line-multi)            ;; needed by consult-line to detect isearch

           ;; Minibuffer history
           :map minibuffer-local-map
           ("C-s" . (lambda ()
                      "Insert the selected region or current symbol at point."
                      (interactive)
                      (insert (with-current-buffer
                                  (window-buffer (minibuffer-selected-window))
                                (or (and transient-mark-mode mark-active (/= (point) (mark))
                                         (buffer-substring-no-properties (point) (mark)))
                                  (thing-at-point 'symbol t)
                                    "")))))
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (with-eval-after-load 'xref
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref))

    ;; More utils
    (defvar consult-colors-history nil
      "History for `consult-colors-emacs' and `consult-colors-web'.")

    ;; No longer preloaded in Emacs 28.
    (autoload 'list-colors-duplicates "facemenu")
    ;; No preloaded in consult.el
    (autoload 'consult--read "consult")

    (defun consult-colors-emacs (color)
      "Show a list of all supported colors for a particular frame.

  You can insert the name (default), or insert or kill the hexadecimal or RGB
  value of the selected COLOR."
      (interactive
       (list (consult--read (list-colors-duplicates (defined-colors))
                            :prompt "Emacs color: "
                            :require-match t
                            :category 'color
                            :history '(:input consult-colors-history)
                            )))
      (insert color))

    ;; Adapted from counsel.el to get web colors.
    (defun consult-colors--web-list nil
      "Return list of CSS colors for `counsult-colors-web'."
      (require 'shr-color)
      (sort (mapcar #'downcase (mapcar #'car shr-color-html-colors-alist)) #'string-lessp))

    (defun consult-colors-web (color)
      "Show a list of all CSS colors.\

  You can insert the name (default), or insert or kill the hexadecimal or RGB
  value of the selected COLOR."
      (interactive
       (list (consult--read (consult-colors--web-list)
                            :prompt "Color: "
                            :require-match t
                            :category 'color
                            :history '(:input consult-colors-history)
                            )))
      (insert color))
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    (setq consult-preview-key '(:debounce 1.0 any))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-goto-line
     consult-theme :preview-key '(:debounce 0.5 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))

  (use-package consult-flyspell
    :bind ("M-g s" . consult-flyspell))

  (use-package consult-yasnippet
    :bind ("M-g y" . consult-yasnippet))

  (use-package embark
    :bind (("s-."   . embark-act)
           ("C-s-." . embark-act)
           ("M-."   . embark-dwim)        ; overrides `xref-find-definitions'
           ([remap describe-bindings] . embark-bindings)
           :map minibuffer-local-map
           ("M-." . my-embark-preview))
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Manual preview for non-Consult commands using Embark
    (defun my-embark-preview ()
      "Previews candidate in vertico buffer, unless it's a consult command."
      (interactive)
      (unless (bound-and-true-p consult--preview-function)
        (save-selected-window
          (let ((embark-quit-after-action nil))
            (embark-dwim)))))

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    (with-eval-after-load 'which-key
      (defun embark-which-key-indicator ()
        "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
        (lambda (&optional keymap targets prefix)
          (if (null keymap)
              (which-key--hide-popup-ignore-command)
            (which-key--show-keymap
             (if (eq (plist-get (car targets) :type) 'embark-become)
                 "Become"
               (format "Act on %s '%s'%s"
                       (plist-get (car targets) :type)
                       (embark--truncate-target (plist-get (car targets) :target))
                       (if (cdr targets) "…" "")))
             (if prefix
                 (pcase (lookup-key keymap prefix 'accept-default)
                   ((and (pred keymapp) km) km)
                   (_ (key-binding prefix 'accept-default)))
               keymap)
             nil nil t (lambda (binding)
                         (not (string-suffix-p "-argument" (cdr binding))))))))

      (setq embark-indicators
            '(embark-which-key-indicator
              embark-highlight-indicator
              embark-isearch-highlight-indicator))

      (defun embark-hide-which-key-indicator (fn &rest args)
        "Hide the which-key indicator immediately when using the completing-read prompter."
        (which-key--hide-popup-ignore-command)
        (let ((embark-indicators
               (remq #'embark-which-key-indicator embark-indicators)))
          (apply fn args)))

      (advice-add #'embark-completing-read-prompter
                  :around #'embark-hide-which-key-indicator)))

  (use-package embark-consult
    :bind (:map minibuffer-mode-map
                ("C-c C-o" . embark-export))
    :hook (embark-collect-mode . consult-preview-at-point-mode))

  ;; Auto completion
  (use-package corfu
    :general
    (:keymaps 'corfu-map
              :states 'insert
              "C-n" #'corfu-next
              "C-p" #'corfu-previous
              "<escape>" #'corfu-quit
              "<return>" #'corfu-insert
              "M-d" #'corfu-show-documentation
              "M-l" #'corfu-show-location)
    :config
    (global-corfu-mode))

  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  ;; Add extensions
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    :config
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))


#+end_src
* Snippets
#+begin_src emacs-lisp :tangle yes

;; Yet another snippet extension
(use-package yasnippet
  :diminish yas-minor-mode
  :hook (after-init . yas-global-mode))

;; Collection of yasnippet snippets
(use-package yasnippet-snippets)

;; Yasnippet Completion At Point Function
(use-package yasnippet-capf
  :init (add-to-list 'completion-at-point-functions #'yasnippet-capf))

(provide 'init-snippet)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-snippet.el ends here

#+end_src
* Which Key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-setup-side-window-bottom)
  (which-key-mode)
  (setq which-key-idle-delay 1))

(provide 'init-whichkey)

#+end_src
* Book marks
#+begin_src emacs-lisp :tangle yes
(use-package bookmark
  :ensure nil
  :config
  (with-no-warnings
    ;; Display icons for bookmarks
    (defun my-bookmark-bmenu--revert ()
      "Re-populate `tabulated-list-entries'."
      (let (entries)
        (dolist (full-record (bookmark-maybe-sort-alist))
          (let* ((name       (bookmark-name-from-full-record full-record))
                 (annotation (bookmark-get-annotation full-record))
                 (location   (bookmark-location full-record))
                 (file       (file-name-nondirectory location))
                 (type       (let ((fmt "%-8.8s"))
                               (cond ((null location)
                                      (propertize (format fmt "NOFILE") 'face 'warning))
                                     ((file-remote-p location)
                                      (propertize (format fmt "REMOTE") 'face 'mode-line-buffer-id))
                                     ((not (file-exists-p location))
                                      (propertize (format fmt "NOTFOUND") 'face 'error))
                                     ((file-directory-p location)
                                      (propertize (format fmt "DIRED") 'face 'warning))
                                     (t (propertize (format fmt "FILE") 'face 'success)))))
                 (icon       (if (icons-displayable-p)
                                 (cond
                                  ((file-remote-p location)
                                   (nerd-icons-codicon "nf-cod-radio_tower"))
                                  ((file-directory-p location)
                                   (nerd-icons-icon-for-dir location))
                                  ((not (string-empty-p file))
                                   (nerd-icons-icon-for-file file)))
                               "")))
            (push (list
                   full-record
                   `[,(if (and annotation (not (string-equal annotation "")))
                          "*" "")
                     ,icon
                     ,(if (display-mouse-p)
                          (propertize name
                                      'font-lock-face 'bookmark-menu-bookmark
                                      'mouse-face 'highlight
                                      'follow-link t
                                      'help-echo "mouse-2: go to this bookmark in other window")
                        name)
                     ,type
                     ,@(if bookmark-bmenu-toggle-filenames
                           (list (propertize location 'face 'completions-annotations)))])
                  entries)))
        (tabulated-list-init-header)
        (setq tabulated-list-entries entries))
      (tabulated-list-print t))
    (advice-add #'bookmark-bmenu--revert :override #'my-bookmark-bmenu--revert)

    (defun my-bookmark-bmenu-list ()
      "Display a list of existing bookmarks.
The list is displayed in a buffer named `*Bookmark List*'.
The leftmost column displays a D if the bookmark is flagged for
deletion, or > if it is flagged for displaying."
      (interactive)
      (bookmark-maybe-load-default-file)
      (let ((buf (get-buffer-create bookmark-bmenu-buffer)))
        (if (called-interactively-p 'interactive)
            (pop-to-buffer buf)
          (set-buffer buf)))
      (bookmark-bmenu-mode)
      (bookmark-bmenu--revert))
    (advice-add #'bookmark-bmenu-list :override #'my-bookmark-bmenu-list)

    (define-derived-mode bookmark-bmenu-mode tabulated-list-mode "Bookmark Menu"
      (setq truncate-lines t)
      (setq buffer-read-only t)
      (setq tabulated-list-format
            `[("" 1) ;; Space to add "*" for bookmark with annotation
              ("" ,(if (icons-displayable-p) 2 0)) ;; Icons
              ("Bookmark" ,bookmark-bmenu-file-column bookmark-bmenu--name-predicate)
              ("Type" 9)
              ,@(if bookmark-bmenu-toggle-filenames
                    '(("File" 0 bookmark-bmenu--file-predicate)))])
      (setq tabulated-list-padding bookmark-bmenu-marks-width)
      (setq tabulated-list-sort-key '("Bookmark" . nil))
      (add-hook 'tabulated-list-revert-hook #'bookmark-bmenu--revert nil t)'
      (setq revert-buffer-function #'bookmark-bmenu--revert)
      (tabulated-list-init-header))))

(provide 'init-bookmark)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-bookmark.el ends here

#+end_src

* Dashboard
#+begin_src emacs-lisp :tangle yes

;; Dashboard
(use-package dashboard
  :ensure t
  :diminish dashboard-mode
  :custom-face
  (dashboard-heading ((t (:inherit (font-lock-string-face bold)))))
  (dashboard-items-face ((t (:weight normal))))
  (dashboard-no-items-face ((t (:weight normal))))
  :pretty-hydra
  ((:title (pretty-hydra-title "Dashboard" 'mdicon "nf-md-view_dashboard")
           :color pink :quit-key ("q" "C-g"))
   ("Navigator"
    (("U" update-config-and-packages "update" :exit t)
     ("H" browse-homepage "homepage" :exit t)
     ("R" restore-session "recover session" :exit t)
     ("S" find-custom-file "settings" :exit t))
    "Section"
    (("}" dashboard-next-section "next")
     ("{" dashboard-previous-section "previous")
     ("r" dashboard-goto-recent-files "recent files")
     ("m" dashboard-goto-bookmarks "bookmarks")
     ("p" dashboard-goto-projects "projects"))
    "Item"
    (("RET" widget-button-press "open" :exit t)
     ("<tab>" widget-forward "next")
     ("C-i" widget-forward "next")
     ("<backtab>" widget-backward "previous")
     ("C-n" next-line "next line")
     ("C-p" previous-line "previous  line"))
    "Misc"
    (("<f2>" open-dashboard "open" :exit t)
     ("g" dashboard-refresh-buffer "refresh" :exit t)
     ("Q" quit-dashboard "quit" :exit t))))
  :bind (("<f2>" . open-dashboard)
         :map dashboard-mode-map
         ("H" . browse-homepage)
         ("R" . restore-session)
         ("S" . find-custom-file)
         ("U" . update-packages)
         ("q" . quit-dashboard)
         ("D" . dashboard-hydra/body)
         ("?" . dashboard-hydra/body))
  :hook (dashboard-mode . (lambda ()
                            ;; No title
                            (setq-local frame-title-format nil)
                            ;; Enable `page-break-lines-mode'
                            (when (fboundp 'page-break-lines-mode)
                              (page-break-lines-mode 1))))
  :init
  (setq dashboard-banner-logo-title "EMACS - Enjoy Programming & Writing"
        dashboard-startup-banner 'ascii
        dashboard-page-separator "\n\f\n"
        dashboard-projects-backend 'project-el
        dashboard-path-style 'truncate-middle
        dashboard-path-max-length 60
        dashboard-center-content t
        dashboard-show-shortcuts t
        dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 15))

        dashboard-display-icons-p #'icons-displayable-p

        dashboard-heading-icons '((recents   . "nf-oct-history")
                                  (bookmarks . "nf-oct-bookmark")
                                  (agenda    . "nf-oct-calendar")
                                  (projects  . "nf-oct-briefcase")
                                  (registers . "nf-oct-database"))

        dashboard-set-navigator t
        dashboard-navigator-buttons
        `(((,(when (icons-displayable-p)
               (nerd-icons-mdicon "nf-md-github" :height 1.4))
            "Homepage" "Browse homepage"
            (lambda (&rest _) (browse-url "http://www.google.com")))
           (,(when (icons-displayable-p)
               (nerd-icons-mdicon "nf-md-backup_restore" :height 1.5))
            "Restore" "Restore previous session"
            (lambda (&rest _) (restore-session)))
           (,(when (icons-displayable-p)
               (nerd-icons-mdicon "nf-md-tools" :height 1.3))
            "Settings" "Open custom file"
            (lambda (&rest _) (find-file custom-file)))
           (,(when (icons-displayable-p)
               (nerd-icons-mdicon "nf-md-update" :height 1.3))
            "Update" "Update Emacs"
            (lambda (&rest _) (update-packages)))
           (,(if (icons-displayable-p)
                 (nerd-icons-mdicon "nf-md-help" :height 1.2)
               "?")
            "" "Help (?/h)"
            (lambda (&rest _) (dashboard-hydra/body)))))

        dashboard-set-footer t
        dashboard-footer-icon
        (if (icons-displayable-p)
            (nerd-icons-octicon "nf-oct-heart" :height 1.2 :face 'nerd-icons-lred)
          (propertize ">" 'face 'dashboard-footer)))

  (dashboard-setup-startup-hook)
  :config
  ;; Insert copyright
  ;; @see https://github.com/emacs-dashboard/emacs-dashboard/issues/219
  (defun my-dashboard-insert-copyright ()
    "Insert copyright in the footer."
    (when dashboard-set-footer
      (dashboard-insert-center
       (propertize (format "\nPowered by Vincent Zhang, %s\n" (format-time-string "%Y"))
                   'face 'font-lock-comment-face))))
  (advice-add #'dashboard-insert-footer :after #'my-dashboard-insert-copyright)

  (defun restore-session ()
    "Restore the previous session."
    (interactive)
    (message "Restoring previous session...")
    (quit-window t)
    (cond
     ((bound-and-true-p tabspaces-mode)
      (tabspaces-restore-session))
     ((bound-and-true-p desktop-save-mode)
      (desktop-read)))
    (message "Restoring previous session...done"))

  (defun dashboard-goto-recent-files ()
    "Go to recent files."
    (interactive)
    (let ((func (local-key-binding "r")))
      (and func (funcall func))))

  (defun dashboard-goto-projects ()
    "Go to projects."
    (interactive)
    (let ((func (local-key-binding "p")))
      (and func (funcall func))))

  (defun dashboard-goto-bookmarks ()
    "Go to bookmarks."
    (interactive)
    (let ((func (local-key-binding "m")))
      (and func (funcall func))))

  (defvar dashboard-recover-layout-p nil
    "Wether recovers the layout.")

  (defun open-dashboard ()
    "Open the *dashboard* buffer and jump to the first widget."
    (interactive)
    ;; Check if need to recover layout
    (if (length> (window-list-1)
                 ;; exclude `treemacs' window
                 (if (and (fboundp 'treemacs-current-visibility)
                          (eq (treemacs-current-visibility) 'visible))
                     2
                   1))
        (setq dashboard-recover-layout-p t))

    ;; Display dashboard in maximized window
    (delete-other-windows)

    ;; Refresh dashboard buffer
    (dashboard-refresh-buffer)

    ;; Jump to the first section
    (dashboard-goto-recent-files))

  (defun quit-dashboard ()
    "Quit dashboard window."
    (interactive)
    (quit-window t)
    (and dashboard-recover-layout-p
         (and (bound-and-true-p winner-mode) (winner-undo))
         (setq dashboard-recover-layout-p nil))))

(provide 'init-dashboard)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dashboard.el ends here

#+end_src
* Dired
#+begin_src emacs-lisp :tangle yes

  ;; Directory operations
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
                ("C-c C-p" . wdired-change-to-wdired-mode))
    :config
    ;; Guess a default target directory
    (setq dired-dwim-target t)

    ;; Always delete and copy recursively
    (setq dired-recursive-deletes 'always
          dired-recursive-copies 'always)

    ;; Show directory first
    (setq dired-listing-switches "-alh --group-directories-first")

    (when t
      (if (executable-find "gls")
          (progn
            ;; Use GNU ls as `gls' from `coreutils' if available.
            (setq insert-directory-program "gls")
            ;; Using `insert-directory-program'
            (setq ls-lisp-use-insert-directory-program t))
        (progn
          ;; Suppress the warning: `ls does not support --dired'.
          (setq dired-use-ls-dired nil)
          (setq dired-listing-switches "-alh"))))

    ;; Quick sort dired buffers via hydra
    (use-package dired-quick-sort
      :bind (:map dired-mode-map
                  ("S" . hydra-dired-quick-sort/body)))

    ;; Show git info in dired
    (use-package dired-git-info
      :bind (:map dired-mode-map
                  (")" . dired-git-info-mode)))

    ;; Allow rsync from dired buffers
    (use-package dired-rsync
      :bind (:map dired-mode-map
                  ("C-c C-r" . dired-rsync)))

    ;; Colorful dired
    (use-package diredfl
      :hook (dired-mode . diredfl-mode))

    ;; Shows icons
    (use-package nerd-icons-dired
      :diminish
      :when (icons-displayable-p)
      :custom-face
      (nerd-icons-dired-dir-face ((t (:inherit nerd-icons-dsilver :foreground unspecified))))
      :hook (dired-mode . nerd-icons-dired-mode))

    ;; Extra Dired functionality
    (use-package dired-aux :ensure nil)
    (use-package dired-x
      :ensure nil
      :demand t
      :config
      (let ((cmd (cond (t "open")
                       (nil "xdg-open")
                       (nil "start")
                       )))
        (setq dired-guess-shell-alist-user
              `(("\\.pdf\\'" ,cmd)
                ("\\.docx\\'" ,cmd)
                ("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
                ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
                ("\\.\\(?:xcf\\)\\'" ,cmd)
                ("\\.csv\\'" ,cmd)
                ("\\.tex\\'" ,cmd)
                ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
                ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
                ("\\.html?\\'" ,cmd)
                ("\\.md\\'" ,cmd))))

      (setq dired-omit-files
            (concat dired-omit-files
                    "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*"))))

  ;; `find-dired' alternative using `fd'
  (when (executable-find "fd")
    (use-package fd-dired))

  (use-package dirvish
    :init (dirvish-override-dired-mode))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-dired.el ends here

#+end_src
* Highlight
#+begin_src emacs-lisp :tangle yes
        ;; Highlight the current line
        (use-package hl-line
          :ensure nil
          :hook ((after-init . global-hl-line-mode)
                 ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
                  (lambda () (setq-local global-hl-line-mode nil)))))

        ;; Highlight matching parens
        (use-package paren
          :ensure nil
          :hook (after-init . show-paren-mode)
          :init (setq show-paren-when-point-inside-paren t
                      show-paren-when-point-in-periphery t)
          :config

          (setq show-paren-context-when-offscreen
                (if (childframe-workable-p) 'child-frame 'overlay))
          (with-no-warnings
            ;; Display matching line for off-screen paren.
            (defun display-line-overlay (pos str &optional face)
              "Display line at POS as STR with FACE.

        FACE defaults to inheriting from default and highlight."
              (let ((ol (save-excursion
                          (goto-char pos)
                          (make-overlay (line-beginning-position)
                                        (line-end-position)))))
                (overlay-put ol 'display str)
                (overlay-put ol 'face
                             (or face '(:inherit highlight)))
                ol))

            (defvar-local show-paren--off-screen-overlay nil)
            (defun show-paren-off-screen (&rest _args)
              "Display matching line for off-screen paren."
              (when (overlayp show-paren--off-screen-overlay)
                (delete-overlay show-paren--off-screen-overlay))
              ;; Check if it's appropriate to show match info,
              (when (and (overlay-buffer show-paren--overlay)
                         (not (or cursor-in-echo-area
                                  executing-kbd-macro
                                  noninteractive
                                  (minibufferp)
                                  this-command))
                         (and (not (bobp))
                              (memq (char-syntax (char-before)) '(?\) ?\$)))
                         (= 1 (logand 1 (- (point)
                                           (save-excursion
                                             (forward-char -1)
                                             (skip-syntax-backward "/\\")
                                             (point))))))
                ;; Rebind `minibuffer-message' called by `blink-matching-open'
                ;; to handle the overlay display.
                (cl-letf (((symbol-function #'minibuffer-message)
                           (lambda (msg &rest args)
                             (let ((msg (apply #'format-message msg args)))
                               (setq show-paren--off-screen-overlay
                                     (display-line-overlay
                                      (window-start) msg ))))))
                  (blink-matching-open))))
            (advice-add #'show-paren-function :after #'show-paren-off-screen)))

        ;; Highlight symbols
        (use-package symbol-overlay
          :diminish
          :custom-face
          (symbol-overlay-default-face ((t (:inherit region :background unspecified :foreground unspecified))))
          (symbol-overlay-face-1 ((t (:inherit nerd-icons-blue :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-2 ((t (:inherit nerd-icons-pink :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-3 ((t (:inherit nerd-icons-yellow :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-4 ((t (:inherit nerd-icons-purple :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-5 ((t (:inherit nerd-icons-red :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-6 ((t (:inherit nerd-icons-orange :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-7 ((t (:inherit nerd-icons-green :background unspecified :foreground unspecified :inverse-video t))))
          (symbol-overlay-face-8 ((t (:inherit nerd-icons-cyan :background unspecified :foreground unspecified :inverse-video t))))
          :bind (("M-i" . symbol-overlay-put)
                 ("M-n" . symbol-overlay-jump-next)
                 ("M-p" . symbol-overlay-jump-prev)
                 ("M-N" . symbol-overlay-switch-forward)
                 ("M-P" . symbol-overlay-switch-backward)
                 ("M-C" . symbol-overlay-remove-all)
                 ([M-f3] . symbol-overlay-remove-all))
          :hook (((prog-mode yaml-mode) . symbol-overlay-mode)
                 (iedit-mode            . turn-off-symbol-overlay)
                 (iedit-mode-end        . turn-on-symbol-overlay))
          :init (setq symbol-overlay-idle-time 0.1)
          :config
          (with-no-warnings
            ;; Disable symbol highlighting while selecting
            (defun turn-off-symbol-overlay (&rest _)
              "Turn off symbol highlighting."
              (interactive)
              (symbol-overlay-mode -1))
            (advice-add #'set-mark :after #'turn-off-symbol-overlay)

            (defun turn-on-symbol-overlay (&rest _)
              "Turn on symbol highlighting."
              (interactive)
              (when (derived-mode-p 'prog-mode 'yaml-mode)
                (symbol-overlay-mode 1)))
            (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay)))

        ;; Highlight indentions
        (use-package highlight-indent-guides
          :diminish
          :hook ((prog-mode yaml-mode) . (lambda ()
                                           "Highlight indentations in small files for better performance."
                                           (unless (too-long-file-p)
                                             (highlight-indent-guides-mode 1))))
          :init (setq highlight-indent-guides-method 'character
                      highlight-indent-guides-responsive 'top
                      highlight-indent-guides-suppress-auto-error t)
          :config
          (with-no-warnings
            ;; Don't display first level of indentation
            (defun my-indent-guides-for-all-but-first-column (level responsive display)
              (unless (< level 1)
                (highlight-indent-guides--highlighter-default level responsive display)))
            (setq highlight-indent-guides-highlighter-function
                  #'my-indent-guides-for-all-but-first-column)

            ;; Disable in `macrostep' expanding
            (with-eval-after-load 'macrostep
              (advice-add #'macrostep-expand
                          :after (lambda (&rest _)
                                   (when highlight-indent-guides-mode
                                     (highlight-indent-guides-mode -1))))
              (advice-add #'macrostep-collapse
                          :after (lambda (&rest _)
                                   (when (derived-mode-p 'prog-mode 'yaml-mode)
                                     (highlight-indent-guides-mode 1)))))))

        ;; Colorize color names in buffers
        (use-package rainbow-mode
          :diminish
          :defines helpful-mode-map
          :bind (:map help-mode-map
                      ("w" . rainbow-mode))
          :hook ((html-mode php-mode helpful-mode) . rainbow-mode)
          :init (with-eval-after-load 'helpful
                  (bind-key "w" #'rainbow-mode helpful-mode-map))
          :config
          (with-no-warnings
            ;; HACK: Use overlay instead of text properties to override `hl-line' faces.
            ;; @see https://emacs.stackexchange.com/questions/36420
            (defun my-rainbow-colorize-match (color &optional match)
              (let* ((match (or match 0))
                     (ov (make-overlay (match-beginning match) (match-end match))))
                (overlay-put ov 'ovrainbow t)
                (overlay-put ov 'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                                          "white" "black"))
                                        (:background ,color)))))
            (advice-add #'rainbow-colorize-match :override #'my-rainbow-colorize-match)

            (defun my-rainbow-clear-overlays ()
              "Clear all rainbow overlays."
              (remove-overlays (point-min) (point-max) 'ovrainbow t))
            (advice-add #'rainbow-turn-off :after #'my-rainbow-clear-overlays)))

        ;; Highlight brackets according to their depth
        (use-package rainbow-delimiters
          :hook (prog-mode . rainbow-delimiters-mode))

        ;; Highlight TODO and similar keywords in comments and strings
        (use-package hl-todo
          :custom-face
          (hl-todo ((t (:inherit default :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
          :bind (:map hl-todo-mode-map
                      ([C-f3]    . hl-todo-occur)
                      ("C-c t p" . hl-todo-previous)
                      ("C-c t n" . hl-todo-next)
                      ("C-c t o" . hl-todo-occur)
                      ("C-c t r" . hl-todo-rg-project)
                      ("C-c t i" . hl-todo-insert))
          :hook ((after-init . global-hl-todo-mode)
                 (hl-todo-mode . (lambda ()
                                   (add-hook 'flymake-diagnostic-functions
                                             #'hl-todo-flymake nil t))))
          :init (setq hl-todo-require-punctuation t
                      hl-todo-highlight-punctuation ":")
          :config
          (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
            (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
          (dolist (keyword '("TRICK" "WORKAROUND"))
            (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
          (dolist (keyword '("DEBUG" "STUB"))
            (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb")))

          (defun hl-todo-rg (regexp &optional files dir)
            "Use `rg' to find all TODO or similar keywords."
            (interactive
             (progn
               (unless (require 'rg nil t)
                 (error "`rg' is not installed"))
               (let ((regexp (replace-regexp-in-string "\\\\[<>]*" "" (hl-todo--regexp))))
                 (list regexp
                       (rg-read-files)
                       (read-directory-name "Base directory: " nil default-directory t)))))
            (rg regexp files dir))

          (defun hl-todo-rg-project ()
            "Use `rg' to find all TODO or similar keywords in current project."
            (interactive)
            (unless (require 'rg nil t)
              (error "`rg' is not installed"))
            (rg-project (replace-regexp-in-string "\\\\[<>]*" "" (hl-todo--regexp)) "everything")))

        ;; Highlight uncommitted changes using VC
        (use-package diff-hl
          :custom (diff-hl-draw-borders nil)
          :custom-face
          (diff-hl-change ((t (:inherit custom-changed :foreground unspecified :background unspecified))))
          (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
          (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
          :bind (:map diff-hl-command-map
                      ("SPC" . diff-hl-mark-hunk))
          :hook ((after-init . global-diff-hl-mode)
                 (after-init . global-diff-hl-show-hunk-mouse-mode)
                 (dired-mode . diff-hl-dired-mode))
          :config
          ;; Highlight on-the-fly
          (diff-hl-flydiff-mode 1)

          ;; Set fringe style
          (setq-default fringes-outside-margins t)

          (with-no-warnings
            (defun my-diff-hl-fringe-bmp-function (_type _pos)
              "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
              (define-fringe-bitmap 'my-diff-hl-bmp
                (vector (if nil #b11111100 #b11100000))
                1 8
                '(center t)))
            (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

            (unless (display-graphic-p)
              ;; Fall back to the display margin since the fringe is unavailable in tty
              (diff-hl-margin-mode 1)
              ;; Avoid restoring `diff-hl-margin-mode'
              (with-eval-after-load 'desktop
                (add-to-list 'desktop-minor-mode-table
                             '(diff-hl-margin-mode nil))))


              ;; Integration with magit
            (with-eval-after-load 'magit
              (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
              (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))

        ;; Pulse current line
        (use-package pulse
          :ensure nil
          :custom-face
          (pulse-highlight-start-face ((t (:inherit region :background unspecified))))
          (pulse-highlight-face ((t (:inherit region :background unspecified :extend t))))
          :hook (((dumb-jump-after-jump imenu-after-jump) . my-recenter-and-pulse)
                 ((bookmark-after-jump magit-diff-visit-file next-error) . my-recenter-and-pulse-line))
          :init
          (with-no-warnings
            (defun my-pulse-momentary-line (&rest _)
              "Pulse the current line."
              (pulse-momentary-highlight-one-line (point)))

            (defun my-pulse-momentary (&rest _)
              "Pulse the region or the current line."
              (if (fboundp 'xref-pulse-momentarily)
                  (xref-pulse-momentarily)
                (my-pulse-momentary-line)))

            (defun my-recenter-and-pulse(&rest _)
              "Recenter and pulse the region or the current line."
              (recenter)
              (my-pulse-momentary))

            (defun my-recenter-and-pulse-line (&rest _)
              "Recenter and pulse the current line."
              (recenter)
              (my-pulse-momentary-line))

            (dolist (cmd '(recenter-top-bottom
                           other-window switch-to-buffer
                           aw-select toggle-window-split
                           windmove-do-window-select
                           pager-page-down pager-page-up
                           treemacs-select-window
                           symbol-overlay-basic-jump))
              (advice-add cmd :after #'my-pulse-momentary-line))

            (dolist (cmd '(pop-to-mark-command
                           pop-global-mark
                           goto-last-change))
              (advice-add cmd :after #'my-recenter-and-pulse))))

        ;; Pulse modified region
        (use-package goggles
          :diminish
          :hook ((prog-mode text-mode) . goggles-mode))

#+end_src
* IBuffer
#+begin_src emacs-lisp :tangle yes


  (use-package ibuffer-vc)

  (use-package ibuffer
    :ensure nil
    :hook (ibuffer-mode . (lambda ()
                                 (message "IBuffer mode hook!")
                                 (ibuffer-switch-to-saved-filter-groups "default")
;;                                 (ibuffer-vc-set-filter-groups-by-vc-root)
                                 (unless (eq ibuffer-sorting-mode 'alphabetic)
                                   (ibuffer-do-sort-by-alphabetic))))
    :bind ("C-x C-b" . ibuffer)
    :init
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Mu4e" (or
                            (mode . message-mode)
                            (mode . mail-mode)
                            (mode . mu4e-main-mode)
                            (mode . mu4e-headers-mode)))
                   ("Dired" (or (mode . dired-mode)))
                   ("shell" (or (mode . eshell-mode)
                                (mode . shell-mode)))
                   ("Emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")
                             (name . "^\\*Dashboard\\*$")
                             (name . "config.org$")
                             (mode . emacs-lisp-mode)))
                   ("Org" (or (mode . org-mode))))))
          
          ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
;;    (nerd-icons-ibuffer-mode)
    
    :init (setq nerd-icons-ibuffer-icon nerd-icons-default-file-icon))

      ;; (use-package ibuffer-projectile
      ;;   :after projectile
      ;;   :hook (ibuffer. ibuffer-projectile-set-filter-groups)
      ;;   :config (setq ibuffer-projectile-prefix
      ;;                 (concat (nerd-icons-octicon
      ;;                          "nf-act-file_directory"
      ;;                          :face ibuffer-filter-group-name-face
      ;;                          :v-adjust -0.05)
      ;;                         " ")
      ;;                 "Project: "))

#+end_src
* Tabs
** Perspectives
;; using tab-bar instead
#+begin_src emacs-lisp :tangle no
  (use-package persp-mode
    :config
    (setq persp-autokill-buffers-on-remove 'kill-weak)
    (persp-mode 1))
#+end_src
** Activities

#+begin_src emacs-lisp :tangle no
  (use-package activities
    :after general
    :init
    (activities-mode)
    (activities-tabs-mode)
    ;; Prevent `edebug' default bindings from interfering.
    (setq edebug-inhibit-emacs-lisp-mode-bindings t)

    :general
    ("C-x C-a C-n" 'activities-new)
     ("C-x C-a C-d" 'activities-define)
     ("C-x C-a C-a" 'activities-resume)
     ("C-x C-a C-s" 'activities-suspend)
     ("C-x C-a C-k" 'activities-kill)
     ("C-x C-a RET" 'activities-switch)
     ("C-x C-a b" 'activities-switch-buffer)
     ("C-x C-a g" 'activities-revert)
     ("C-x C-a l" 'activities-list))
     #+end_src
** Centaur
#+begin_src emacs-lisp :tangle yes
  (use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-show-new-tab-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        ;; centaur-tabs-label-fixed-length 15
        ;; centaur-tabs-gray-out-icons 'buffer
        ;; centaur-tabs-plain-icons t
        x-underline-at-descent-line t
        centaur-tabs-left-edge-margin nil)
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-mode t)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       "Emacs")
      ((derived-mode-p 'prog-mode)
       "Editing")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       "OrgMode")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward)
  ("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
  ("C-S-<next>" . centaur-tabs-move-current-tab-to-right))
;;  (:map meow-normal-state-keymap
;;        ("g t" . centaur-tabs-forward)
;;        ("g T" . centaur-tabs-backward)))

#+end_src     
* Projectile

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :config
    ;; replace project with projectile
    (setq projectile-keymap-prefix "C-c p")
    (projectile-mode))
#+end_src
* Kill Ring

#+begin_src emacs-lisp :tangle yes

;;; Code:

(setq kill-ring-max 200)

;; Save clipboard contents into kill-ring before replace them
(setq save-interprogram-paste-before-kill t)

;; Kill & Mark things easily
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp] . easy-mark)))

;; Interactively insert and edit items from kill-ring
(use-package browse-kill-ring
  :bind ("C-c k" . browse-kill-ring)
  :hook (after-init . browse-kill-ring-default-keybindings)
  :init (setq browse-kill-ring-separator "────────────────"
              browse-kill-ring-separator-face 'shadow))

(provide 'init-kill-ring)


#+end_src

* Workspaces
#+begin_src emacs-lisp :tangle yes
(use-package tabspaces
  :hook (after-init . tabspaces-mode)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  ;; sessions
  (tabspaces-session t)
  (tabspaces-session-auto-restore t))

(provide 'init-workspace)

#+end_src
* Window
#+begin_src emacs-lisp :tangle yes

;; Directional window-selection routines
(use-package windmove
  :ensure nil
  :hook (after-init . (lambda ()
                        (windmove-default-keybindings 'super))))

;; Restore old window configurations
(use-package winner
  :ensure nil
  :commands (winner-undo winner-redo)
  :hook (after-init . winner-mode)
  :init (setq winner-boring-buffers '("*Completions*"
                                      "*Compile-Log*"
                                      "*inferior-lisp*"
                                      "*Fuzzy Completions*"
                                      "*Apropos*"
                                      "*Help*"
                                      "*cvs*"
                                      "*Buffer List*"
                                      "*Ibuffer*"
                                      "*esh command on file*")))

;; Quickly switch windows
(use-package ace-window
  :pretty-hydra
  ((:title (pretty-hydra-title "Window Management" 'faicon "nf-fa-th")
           :foreign-keys warn :quit-key ("q" "C-g"))
   ("Actions"
    (("TAB" other-window "switch")
     ("x" ace-delete-window "delete")
     ("X" ace-delete-other-windows "delete other" :exit t)
     ("s" ace-swap-window "swap")
     ("a" ace-select-window "select" :exit t)
     ("m" toggle-frame-maximized "maximize" :exit t)
     ("u" toggle-frame-fullscreen "fullscreen" :exit t))
    "Resize"
    (("h" shrink-window-horizontally "←")
     ("j" enlarge-window "↓")
     ("k" shrink-window "↑")
     ("l" enlarge-window-horizontally "→")
     ("n" balance-windows "balance"))
    "Split"
    (("r" split-window-right "horizontally")
     ("R" split-window-horizontally-instead "horizontally instead")
     ("v" split-window-below "vertically")
     ("V" split-window-vertically-instead "vertically instead")
     ("t" toggle-window-split "toggle"))
    "Zoom"
    (("+" text-scale-increase "in")
     ("=" text-scale-increase "in")
     ("-" text-scale-decrease "out")
     ("0" (text-scale-increase 0) "reset"))
    "Misc"
    (("o" set-frame-font "frame font")
     ("f" make-frame-command "new frame")
     ("d" delete-frame "delete frame")
     ("<left>" winner-undo "winner undo")
     ("<right>" winner-redo "winner redo"))))
  :custom-face
  (aw-leading-char-face ((t (:inherit font-lock-keyword-face :foreground unspecified :bold t :height 3.0))))
  (aw-minibuffer-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 1.0))))
  (aw-mode-line-face ((t (:inherit mode-line-emphasis :bold t))))
  :bind (([remap other-window] . ace-window)
         ("C-c w" . ace-window-hydra/body))
  :hook (emacs-startup . ace-window-display-mode)
  :config
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))
      (user-error "`toggle-window-split' only supports two windows")))

  ;; Bind hydra to dispatch list
  (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t)

  ;; Select widnow via `M-1'...`M-9'
  (defun aw--select-window (number)
    "Slecet the specified window."
    (when (numberp number)
      (let ((found nil))
        (dolist (win (aw-window-list))
          (when (and (window-live-p win)
                     (eq number
                         (string-to-number
                          (window-parameter win 'ace-window-path))))
            (setq found t)
            (aw-switch-to-window win)))
        (unless found
          (message "No specified window: %d" number)))))
  (dotimes (n 9)
    (bind-key (format "M-%d" (1+ n))
              (lambda ()
                (interactive)
                (aw--select-window (1+ n))))))

;; Enforce rules for popups
(use-package popper
  :custom
  (popper-group-function #'popper-group-by-directory)
  (popper-echo-dispatch-actions t)
  :bind (:map popper-mode-map
              ("C-h z"       . popper-toggle)
              ("C-<tab>"     . popper-cycle)
              ("C-M-<tab>"   . popper-toggle-type))
  :hook (emacs-startup . popper-echo-mode)
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*$"
          "Output\\*$" "\\*Pp Eval Output\\*$"
          "^\\*eldoc.*\\*$"
          "\\*Compile-Log\\*$"
          "\\*Completions\\*$"
          "\\*Warnings\\*$"
          "\\*Async Shell Command\\*$"
          "\\*Apropos\\*$"
          "\\*Backtrace\\*$"
          "\\*Calendar\\*$"
          "\\*Fd\\*$" "\\*Find\\*$" "\\*Finder\\*$"
          "\\*Kill Ring\\*$"
          "\\*Embark \\(Collect\\|Live\\):.*\\*$"

          bookmark-bmenu-mode
          comint-mode
          compilation-mode
          help-mode helpful-mode
          tabulated-list-mode
          Buffer-menu-mode

          flymake-diagnostics-buffer-mode
          flycheck-error-list-mode flycheck-verify-mode

          gnus-article-mode devdocs-mode
          grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode
          youdao-dictionary-mode osx-dictionary-mode fanyi-mode

          "^\\*Process List\\*$" process-menu-mode
          list-environment-mode cargo-process-mode

          "^\\*.*eshell.*\\*.*$"
          "^\\*.*shell.*\\*.*$"
          "^\\*.*terminal.*\\*.*$"
          "^\\*.*vterm[inal]*.*\\*.*$"

          "\\*DAP Templates\\*$" dap-server-log-mode
          "\\*ELP Profiling Restuls\\*" profiler-report-mode
          "\\*Paradox Report\\*$" "\\*package update results\\*$" "\\*Package-Lint\\*$"
          "\\*[Wo]*Man.*\\*$"
          "\\*ert\\*$" overseer-buffer-mode
          "\\*gud-debug\\*$"
          "\\*lsp-help\\*$" "\\*lsp session\\*$"
          "\\*quickrun\\*$"
          "\\*tldr\\*$"
          "\\*vc-.*\\**"
          "\\*diff-hl\\**"
          "^\\*macro expansion\\**"

          "\\*Agenda Commands\\*" "\\*Org Select\\*" "\\*Capture\\*" "^CAPTURE-.*\\.org*"
          "\\*Gofmt Errors\\*$" "\\*Go Test\\*$" godoc-mode
          "\\*docker-.+\\*"
          "\\*prolog\\*" inferior-python-mode inf-ruby-mode swift-repl-mode
          "\\*rustfmt\\*$" rustic-compilation-mode rustic-cargo-clippy-mode
          rustic-cargo-outdated-mode rustic-cargo-run-mode rustic-cargo-test-mode))

  (with-eval-after-load 'doom-modeline
    (setq popper-mode-line
          '(:eval (let ((face (if (doom-modeline--active)
                                  'doom-modeline-emphasis
                                'doom-modeline)))
                    (if (and (icons-displayable-p)
                             (bound-and-true-p doom-modeline-icon)
                             (bound-and-true-p doom-modeline-mode))
                        (format " %s "
                                (nerd-icons-octicon "nf-oct-pin" :face face))
                      (propertize " POP " 'face face))))))
  :config
  (with-no-warnings
    (defun my-popper-fit-window-height (win)
      "Determine the height of popup window WIN by fitting it to the buffer's content."
      (fit-window-to-buffer
       win
       (floor (frame-height) 3)
       (floor (frame-height) 3)))
    (setq popper-window-height #'my-popper-fit-window-height)

    (defun popper-close-window-hack (&rest _)
      "Close popper window via `C-g'."
      ;; `C-g' can deactivate region
      (when (and (called-interactively-p 'interactive)
                 (not (region-active-p))
                 popper-open-popup-alist)
        (let ((window (caar popper-open-popup-alist)))
          (when (window-live-p window)
            (delete-window window)))))
    (advice-add #'keyboard-quit :before #'popper-close-window-hack)))

(provide 'init-window)

#+end_src
* Treemacs
#+begin_src emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src

* Shells
** VTerm
#+begin_src emacs-lisp :tangle no
  ;; Better terminal emulator
  ;; @see https://github.com/akermu/emacs-libvterm#installation
  (when (and module-file-suffix           ; dynamic module
             (executable-find "cmake")
             (executable-find "libtool")  ; libtool-bin
             (executable-find "make"))
    (use-package vterm
      :bind (:map vterm-mode-map
                  ([f9] . (lambda ()
                            (interactive)
                            (and (fboundp 'shell-pop-toggle)
                                 (shell-pop-toggle)))))
      :init (setq vterm-always-compile-module t))

    (use-package multi-vterm
      :bind ("C-<f9>" . multi-vterm)
      :custom (multi-vterm-buffer-name "vterm")
      :config
      (with-no-warnings
        ;; Use `pop-to-buffer' instead of `switch-to-buffer'
        (defun my-multi-vterm ()
          "Create new vterm buffer."
          (interactive)
          (let ((vterm-buffer (multi-vterm-get-buffer)))
            (setq multi-vterm-buffer-list
                  (nconc multi-vterm-buffer-list (list vterm-buffer)))
            (set-buffer vterm-buffer)
            (multi-vterm-internal)
            (pop-to-buffer vterm-buffer)))
        (advice-add #'multi-vterm :override #'my-multi-vterm))))

  ;; Shell Pop: leverage `popper'
  (with-no-warnings
    (defvar shell-pop--frame nil)
    (defvar shell-pop--window nil)

    (defun shell-pop--shell (&optional arg)
      "Run shell and return the buffer."
      (cond ((fboundp 'vterm) (vterm arg))
            (sys/win32p (eshell arg))
            (t (shell))))

    (defun shell-pop--hide-frame ()
      "Hide child frame and refocus in parent frame."
      (when (and (childframe-workable-p)
                 (frame-live-p shell-pop--frame)
                 (frame-visible-p shell-pop--frame))
        (make-frame-invisible shell-pop--frame)
        (select-frame-set-input-focus (frame-parent shell-pop--frame))
        (setq shell-pop--frame nil)))

    (defun shell-pop-toggle ()
      "Toggle shell."
      (interactive)
      (shell-pop--hide-frame)
      (if (window-live-p shell-pop--window)
          (progn
            (delete-window shell-pop--window)
            (setq shell-pop--window nil))
        (setq shell-pop--window
              (get-buffer-window (shell-pop--shell)))))
    (bind-keys ([f9]  . shell-pop-toggle)
               ("C-`" . shell-pop-toggle))

    (when (childframe-workable-p)
      (defun shell-pop-posframe-hidehandler (_)
        "Hidehandler used by `shell-pop-posframe-toggle'."
        (not (eq (selected-frame) shell-pop--frame)))

      (defun shell-pop-posframe-toggle ()
        "Toggle shell in child frame."
        (interactive)
        (let* ((buffer (shell-pop--shell))
               (window (get-buffer-window buffer)))
          ;; Hide window: for `popper'
          (when (window-live-p window)
            (delete-window window))

          (if (and (frame-live-p shell-pop--frame)
                   (frame-visible-p shell-pop--frame))
              (progn
                ;; Hide child frame and refocus in parent frame
                (make-frame-invisible shell-pop--frame)
                (select-frame-set-input-focus (frame-parent shell-pop--frame))
                (setq shell-pop--frame nil))
            (let ((width  (max 100 (round (* (frame-width) 0.62))))
                  (height (round (* (frame-height) 0.62))))
              ;; Shell pop in child frame
              (setq shell-pop--frame
                    (posframe-show
                     buffer
                     :poshandler #'posframe-poshandler-frame-center
                     :hidehandler #'shell-pop-posframe-hidehandler
                     :left-fringe 8
                     :right-fringe 8
                     :width width
                     :height height
                     :min-width width
                     :min-height height
                     :internal-border-width 3
                     :internal-border-color (face-background 'posframe-border nil t)
                     :background-color (face-background 'tooltip nil t)
                     :override-parameters '((cursor-type . t))
                     :respect-mode-line t
                     :accept-focus t))

              ;; Focus in child frame
              (select-frame-set-input-focus shell-pop--frame)

              (with-current-buffer buffer
                (setq-local cursor-type 'box) ; blink cursor
                (goto-char (point-max))
                (when (fboundp 'vterm-reset-cursor-point)
                  (vterm-reset-cursor-point)))))))
      (bind-key "C-`" #'shell-pop-posframe-toggle)))

  (provide 'init-shell
               :bind ("C-<f9>" . eat))

#+end_src

** Terminals
*** VTerm
https://github.com/akermu/emacs-libvterm/blob/master/README.md


#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :ensure t)
#+end_src
*** EAT

https://codeberg.org/akib/emacs-eat#user-content-headline-2

#+begin_src emacs-lisp :tangle no
  (use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))

  #+end_src
* Markdown
#+begin_src emacs-lisp :tangle yes

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode))
  :init
  (setq markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-asymmetric-header t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t

        markdown-content-type "application/xhtml+xml"
        markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                             "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
        markdown-xhtml-header-content "
<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<style>
body {
  box-sizing: border-box;
  max-width: 740px;
  width: 100%;
  margin: 40px auto;
  padding: 0 10px;
}
</style>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('markdown-body');
  document.querySelectorAll('pre code').forEach((code) => {
    if (code.className != 'mermaid') {
      hljs.highlightBlock(code);
    }
  });
});
</script>

<script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
<script>
mermaid.initialize({
  theme: 'default',  // default, forest, dark, neutral
  startOnLoad: true
});
</script>
"
        markdown-gfm-additional-languages "Mermaid")

  ;; `multimarkdown' is necessary for `highlight.js' and `mermaid.js'
  (when (executable-find "multimarkdown")
    (setq markdown-command "multimarkdown"))
  :config
  ;; Support `mermaid'
  (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))

  (with-no-warnings
    ;; Use `which-key' instead
    (advice-add #'markdown--command-map-prompt :override #'ignore)
    (advice-add #'markdown--style-map-prompt   :override #'ignore)

    ;; Preview with built-in webkit
    (defun my-markdown-export-and-preview (fn)
      "Preview with `xwidget' if applicable, otherwise with the default browser."
      (if (featurep 'xwidget-internal)
          (centaur-webkit-browse-url (concat "file://" (markdown-export)) t)
        (funcall fn)))
    (advice-add #'markdown-export-and-preview :around #'my-markdown-export-and-preview))

  ;; Preview via `grip'
  ;; Install: pip install grip
  (use-package grip-mode
    :defines org-mode-map
    :bind (:map markdown-mode-command-map
                ("g" . grip-mode))
    :init
    (with-eval-after-load 'org
      (bind-key "C-c g" #'grip-mode org-mode-map))

    (setq grip-update-after-change nil)
    (when-let ((credential (auth-source-user-and-password "api.github.com")))
      (setq grip-github-user (car credential)
            grip-github-password (cadr credential))))

  ;; Table of contents
  (use-package markdown-toc
    :diminish
    :bind (:map markdown-mode-command-map
                ("r" . markdown-toc-generate-or-refresh-toc))
    :hook (markdown-mode . markdown-toc-mode)
    :init (setq markdown-toc-indentation-space 2
                markdown-toc-header-toc-title "\n## Table of Contents"
                markdown-toc-user-toc-structure-manipulation-fn 'cdr)
    :config
    (with-no-warnings
      (define-advice markdown-toc-generate-toc (:around (fn &rest args) lsp)
        "Generate or refresh toc after disabling lsp."
        (cond
         ((bound-and-true-p lsp-managed-mode)
          (lsp-managed-mode -1)
          (apply fn args)
          (lsp-managed-mode 1))
         ((bound-and-true-p eglot--manage-mode)
          (eglot--manage-mode -1)
          (apply fn args)
          (eglot--manage-mode 1))
         (t
          (apply fn args)))))))

(provide 'init-markdown)


#+end_src
* Org-mode
:LOGBOOK:
CLOCK: [2024-04-21 Sun 11:59]--[2024-04-21 Sun 12:24] =>  0:25
:END:
#+begin_src emacs-lisp :tangle yes

  (use-package org
    :ensure nil
    :custom-face (org-ellipsis ((t (:foreground unspecified))))
    :pretty-hydra
    ;; See `org-structure-template-alist'
    ((:title (pretty-hydra-title "Org Template" 'sucicon "nf-custom-orgmode" :face 'nerd-icons-green)
             :color blue :quit-key ("q" "C-g"))
     ("Basic"
      (("a" (hot-expand "<a") "ascii")
       ("c" (hot-expand "<c") "center")
       ("C" (hot-expand "<C") "comment")
       ("e" (hot-expand "<e") "example")
       ("E" (hot-expand "<E") "export")
       ("h" (hot-expand "<h") "html")
       ("l" (hot-expand "<l") "latex")
       ("n" (hot-expand "<n") "note")
       ("o" (hot-expand "<q") "quote")
       ("v" (hot-expand "<v") "verse"))
      "Head"
      (("i" (hot-expand "<i") "index")
       ("A" (hot-expand "<A") "ASCII")
       ("I" (hot-expand "<I") "INCLUDE")
       ("H" (hot-expand "<H") "HTML")
       ("L" (hot-expand "<L") "LaTeX"))
      "Source"
      (("s" (hot-expand "<s") "src")
       ("m" (hot-expand "<s" "emacs-lisp") "emacs-lisp")
       ("y" (hot-expand "<s" "python :results output") "python")
       ("p" (hot-expand "<s" "perl") "perl")
       ("w" (hot-expand "<s" "powershell") "powershell")
       ("r" (hot-expand "<s" "ruby") "ruby")
       ("S" (hot-expand "<s" "sh") "sh")
       ("g" (hot-expand "<s" "go :imports '\(\"fmt\"\)") "golang"))
      "Misc"
      (("u" (hot-expand "<s" "plantuml :file CHANGE.png") "plantuml")
       ("Y" (hot-expand "<s" "ipython :session :exports both :results raw drawer\n$0") "ipython")
       ("P" (progn
              (insert "#+HEADERS: :results output :exports both :shebang \"#!/usr/bin/env perl\"\n")
              (hot-expand "<s" "perl")) "Perl tangled")
       ("<" self-insert-command "ins"))))
    :bind (("C-c a" . org-agenda)
           ("C-c b" . org-switchb)
           ("C-c x" . org-capture)
           :map org-mode-map
           ("<" . (lambda ()
                    "Insert org template."
                    (interactive)
                    (if (or (region-active-p) (looking-back "^\s*" 1))
                        (org-hydra/body)
                      (self-insert-command 1)))))
    :hook (((org-babel-after-execute org-mode) . org-redisplay-inline-images) ; display image
           (org-mode . (lambda ()
                         "Beautify org symbols."

                         (prettify-symbols-mode 1)))
           (org-indent-mode . (lambda()
                                (diminish 'org-indent-mode)
                                ;; HACK: Prevent text moving around while using brackets
                                ;; @see https://github.com/seagle0128/.emacs.d/issues/88
                                (make-variable-buffer-local 'show-paren-mode)
                                (setq show-paren-mode nil))))
    :config
    ;; For hydra
    (defun hot-expand (str &optional mod)
      "Expand org template.

        STR is a structure template string recognised by org like <s. MOD is a
        string with additional parameters to add the begin line of the
        structure element. HEADER string includes more parameters that are
        prepended to the element after the #+HEADER: tag."
      (let (text)
        (when (region-active-p)
          (setq text (buffer-substring (region-beginning) (region-end)))
          (delete-region (region-beginning) (region-end)))
        (insert str)
        (if (fboundp 'org-try-structure-completion)
            (org-try-structure-completion) ; < org 9
          (progn
            ;; New template expansion since org 9
            (require 'org-tempo nil t)
            (org-tempo-complete-tag)))
        (when mod (insert mod) (forward-line))
        (when text (insert text))))

    ;; To speed up startup, don't put to init section
    (setq org-modules nil                 ; Faster loading
          org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org"
          org-capture-templates
          `(("i" "Idea" entry (file ,(concat org-directory "/idea.org"))
             "*  %^{Title} %?\n%U\n%a\n")
            ("t" "Todo" entry (file ,(concat org-directory "/gtd.org"))
             "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
            ("n" "Note" entry (file ,(concat org-directory "/note.org"))
             "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
            ("j" "Journal" entry (file+olp+datetree
                                  ,(concat org-directory "/journal.org"))
             "*  %^{Title} %?\n%U\n%a\n" :clock-in t :clock-resume t)
            ("b" "Book" entry (file+olp+datetree
                               ,(concat org-directory "/book.org"))
             "* Topic: %^{Description}  %^g %? Added: %U"))

          org-todo-keywords
          '((sequence "TODO(t)" "DOING(i)" "HANGUP(h)" "|" "DONE(d)" "CANCEL(c)")
            (sequence "⚑(T)" "🏴(I)" "❓(H)" "|" "✔(D)" "✘(C)"))
          org-todo-keyword-faces '(("HANGUP" . warning)
                                   ("❓" . warning))
          org-priority-faces '((?A . error)
                               (?B . warning)
                               (?C . success))

          ;; Agenda styling
          ;;     org-agenda-files (list org-directory)
          org-agenda-block-separator ?─
          org-agenda-time-grid
          '((daily today require-timed)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
          org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────"

          org-tags-column -80
          org-log-done 'time
          org-catch-invisible-edits 'smart
          org-startup-indented t
          org-ellipsis (if (char-displayable-p ?⏷) "\t⏷" nil)
          org-pretty-entities nil
          org-hide-emphasis-markers t)
    (setq
     org-agenda-start-with-clockreport-mode t
     org-agenda-start-with-follow-mode nil
     org-agenda-start-with-log-mode t
     org-agenda-include-deadlines t
     org-agenda-include-diary t
     org-agenda-files (concat org-directory "/org-agenda-files.txt")

     org-default-inbox-file (expand-file-name (concat org-directory "/inbox.org"))
     org-default-someday-file (expand-file-name (concat org-directory "/someday.org"))
     org-refile-targets '((org-agenda-files . (:maxlevel . 3))))


    ;; Add new template
    (add-to-list 'org-structure-template-alist '("n" . "note"))

    ;; Use embedded webkit browser if possible
    (when (featurep 'xwidget-internal)
      (push '("\\.\\(x?html?\\|pdf\\)\\'"
              .
              (lambda (file _link)
                (webkit-browse-url (concat "file://" file) t)))
            org-file-apps))

    ;; Add md/gfm backends
    (add-to-list 'org-export-backends 'md)
    (use-package ox-gfm
      :init (add-to-list 'org-export-backends 'gfm))

    ;; Prettify UI
    (use-package org-modern
      :hook ((org-mode . org-modern-mode)
             (org-agenda-finalize . org-modern-agenda)
             (org-modern-mode . (lambda ()
                                  "Adapt `org-modern-mode'."
                                  ;; Disable Prettify Symbols mode
                                  (setq prettify-symbols-alist nil)
                                  (prettify-symbols-mode -1)))))

    ;; Babel
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t)

    (defconst load-language-alist
      '((emacs-lisp . t)
        (perl       . t)
        (python     . t)
        (ruby       . t)
        (js         . t)
        (css        . t)
        (sass       . t)
        (C          . t)
        (java       . t)
        (shell      . t)
        (plantuml   . t))
      "Alist of org ob languages.")

    (use-package ob-go
      :init (cl-pushnew '(go . t) load-language-alist))

    (use-package ob-powershell
      :init (cl-pushnew '(powershell . t) load-language-alist))

    (use-package ob-rust
      :init (cl-pushnew '(rust . t) load-language-alist))

    ;; Install: npm install -g @mermaid-js/mermaid-cli
    (use-package ob-mermaid
      :init (cl-pushnew '(mermaid . t) load-language-alist))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 load-language-alist)


    (use-package org-rich-yank
      :bind (:map org-mode-map
                  ("C-M-y" . org-rich-yank)))

    ;; Table of contents
    (use-package toc-org
      :hook (org-mode . toc-org-mode))

    ;; Export text/html MIME emails
    (use-package org-mime
      :bind (:map message-mode-map
                  ("C-c M-o" . org-mime-htmlize)
                  :map org-mode-map
                  ("C-c M-o" . org-mime-org-buffer-htmlize)))

    ;; Add graphical view of agenda
    (use-package org-timeline
      :hook (org-agenda-finalize . org-timeline-insert-timeline))

    ;; Auto-toggle Org LaTeX fragments
    (use-package org-fragtog
      :diminish
      :hook (org-mode . org-fragtog-mode))

    ;; Preview
    (use-package org-preview-html
      :diminish
      :bind (:map org-mode-map
                  ("C-c C-w" . org-preview-html-mode))
      :init (when (featurep 'xwidget-internal)
              (setq org-preview-html-viewer 'xwidget)))

    ;; Presentation
    (use-package org-tree-slide
      :diminish
      :functions (org-display-inline-images
                  org-remove-inline-images)
      :bind (:map org-mode-map
                  ("s-<f7>" . org-tree-slide-mode)
                  :map org-tree-slide-mode-map
                  ("<left>" . org-tree-slide-move-previous-tree)
                  ("<right>" . org-tree-slide-move-next-tree)
                  ("S-SPC" . org-tree-slide-move-previous-tree)
                  ("SPC" . org-tree-slide-move-next-tree))
      :hook ((org-tree-slide-play . (lambda ()
                                      (text-scale-increase 4)
                                      (org-display-inline-images)
                                      (read-only-mode 1)))
             (org-tree-slide-stop . (lambda ()
                                      (text-scale-increase 0)
                                      (org-remove-inline-images)
                                      (read-only-mode -1))))
      :init (setq org-tree-slide-header nil
                  org-tree-slide-slide-in-effect t
                  org-tree-slide-heading-emphasis nil
                  org-tree-slide-cursor-init t
                  org-tree-slide-modeline-display 'outside
                  org-tree-slide-skip-done nil
                  org-tree-slide-skip-comments t
                  org-tree-slide-skip-outline-level 3))

    ;; Pomodoro
    (use-package org-pomodoro
      :custom-face
      (org-pomodoro-mode-line ((t (:inherit warning))))
      (org-pomodoro-mode-line-overtime ((t (:inherit error))))
      (org-pomodoro-mode-line-break ((t (:inherit success))))
      :bind (:map org-mode-map
                  ("C-c C-x m" . org-pomodoro))
      :init
      (with-eval-after-load 'org-agenda
        (bind-keys :map org-agenda-mode-map
                   ("K" . org-pomodoro)
                   ("C-c C-x m" . org-pomodoro)))))

  ;; Roam
  (use-package doct)
  (use-package doct-org-roam
    :load-path "packages/"
    :commands (doct-org-roam)
    :after org-roam
    :init
    (setq org-roam-directory (concat org-directory "/roam"))
    (setq org-roam-dailies-directory (concat org-directory "/roam/daily"))
    (setq org-roam-capture-templates
          (doct-org-roam '(
                           ("Default" :keys "d"
                            :file "%<Y%m%d%H%M%S>-${slug}.org"
                            :prepend t
                            :type plain
                            :template ("#+title: ${title}"
                                       "%?"))

                           ("Project" :keys "p"
                            :file "%<Y%m%d%H%M%S>-${slug}.org"
                            :prepend t
                            :type plain
                            :template ("#+title: ${title}"
                                       "* Overview"
                                       "* Goals"
                                       "* Tasks"
                                       "** TODO Add initial Tasks"
                                       "** TODO %?"
                                       "* Dates"
                                       "* Contacts"))
                           ))))

  (use-package org-roam-protocol
    :ensure org-roam
    :config
    (setq org-roam-dailies-capture-templates
          '(
            ("d" "Today"
             plain (file (concat org-directory "/templates/org-roam-dailies.org"))
             :if-new (file "%<%Y-%m-%d>.org")
             )

            ("e" "Email" entry "** TODO Respond to e-mail from %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n:PROPERTIES:\nCREATED: %U\n:END:\n %a"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Tasks")))

            ("p" "Phone Call" entry "** Phone call with %?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Phone Calls")))

            ("m" "Meeting" entry "** Meeting with %?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Meetings")))

            ("t" "Todo" entry "** TODO %?\n%a"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Tasks")))

            ("$" "Trade"
             table-line
             "|%<%H:%M>|%^{Direction|BUY|SELL}|%^{Size|5}|%^{WL|WIN|LOSS}|%^{Gross}|%^{Commissions}|"
             :table-line-pos "II-1" ;; first line before the second horizontal separator line
             :target (file+olp "%<%Y-%m-%d>.org" ("Trading" "Trade Details") )
             )
            ))

    (setq org-roam-capture-ref-templates
          '(
            ("r" "ref" plain "%?" :target (file+head "${slug}.org" "#+title: ${title}\n#+filetags: :BOOKMARK:") :unnarrowed t)

            ;; used by org-roam-protocol
            ;; look here too see how it is used: [[file:~/.qutebrowser/config.py][qutebrowser]]
            ("R" "ref" plain "%?"
             :target (file+head "web/${slug}.org" "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+filetags: :BOOKMARK:\n\n")
             :unnarrowed t))))

  (use-package org-roam
    :after org
    :ensure t
    :demand t
    :init (setq org-roam-v2-ack t)
    (setq org-roam-completion-everywhere t)
    :hook (org-after-todo-state-change . (lambda ()
                                           (when (equal org-state "DONE")
                                             (my/org-roam-copy-todo-to-today))))
    :config
    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
  
    (org-roam-db-autosync-mode)
    (my/org-roam-refresh-agenda-list))

  (use-package org-download
    :ensure t
    :load-path "~/emacs-scratch/packages"
    :after (org)
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-image-actual-width 300)
    (org-download-screenshot-method "/usr/sbin/screencapture %s")
    :config
    (require 'org-download)
    (add-hook 'dired-mode-hook 'org-download-enable))

  (use-package org
    :config
    (add-to-list 'org-capture-templates '("." "Today" entry (file+headline org-default-inbox-file "Tasks")
                                          "* TODO %^{Task}\nSCHEDULED: %t\n%a\n" :immediate-finish t))

    (add-to-list 'org-capture-templates '("t" "New task" entry (file+headline org-default-inbox-file "Tasks")
                                          "* TODO %?\n%a\n"))

    (add-to-list 'org-capture-templates '("s" "Someday" entry (file+headline org-default-inbox-file "Someday")
                                          "* SOMEDAY %^{Task}\n\n%a\n"
                                          :immediate-finish t))

    ;; the 'r' template is used by mu4e customizations use caution when modifying
    (add-to-list 'org-capture-templates '("r" "Respond to email" entry (file+headline org-default-inbox-file "Tasks")
                                          "* TODO Respond to %:from on %:subject  :email: \nSCHEDULED: %t\n%U\n%a\n"
                                          :clock-in t
                                          :clock-resume t
                                          :immediate-finish t))

    (add-to-list 'org-capture-templates '("p" "Protocol" entry (file+headline org-default-inbox-file "Reference" )
                                          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"))

    (add-to-list 'org-capture-templates '("L" "Protocol Link" entry (file+headline org-default-inbox-file "Reference")
                                          "* %:annotation :WEBURL:\nCaptured On: %U\n%?"))
    )


  (provide 'init-org)

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;; init-org.el ends here

#+end_src
* Org Roam
#+begin_src emacs-lisp :tangle yes

  ;; (general-create-definer lad/org-roam-command-map :prefix "C-c n" :which-key "Roam")
  ;; (lad/org-roam-command-map
  ;;   "d" '(:ignore t :which-key "Dailies")
  ;;   "dt" '(org-roam-dailies-goto-today :wk "Go to today")
  ;;   "dT" '(org-roam-dailies-capture-today :wk "Capture today")
  ;;   "n" '(:ignore t :which-key "Nodes")
  ;;   "nf" '(org-roam-node-find :wk "Find node"))

  (use-package 
    org-roam
    :ensure t
    :after org
    :general
    ("C-c x" 'org-roam-capture)
    ("C-c n d t" 'org-roam-dailies-goto-today)
    ("C-c n d T" 'org-roam-dailies-capture-today)
    ("C-c n f" 'org-roam-node-find)
    ;;("C-c n" '(:keymap lad/org-roam-command-map :wk "Roam"))
    :config
    (require 'org-roam-protocol)
    (use-package doct)
    (use-package doct-org-roam
      :load-path "packages/"
      :commands (doct-org-roam)
      :init
      (setq org-roam-directory (expand-file-name (concat org-directory "/roam")))
      (setq org-roam-dailies-directory (expand-file-name (concat org-directory "/roam/daily")))
      (setq org-roam-capture-templates
            (doct-org-roam '(
                             ("Default" :keys "d"
                              :file "%<Y%m%d%H%M%S>-${slug}.org"
                              :prepend t
                              :type plain
                              :template ("#+title: ${title}"
                                         "%?"))

                             ("Project" :keys "p"
                              :file "%<Y%m%d%H%M%S>-${slug}.org"
                              :prepend t
                              :type plain
                              :template ("#+title: ${title}"
                                         "* Overview"
                                         "* Goals"
                                         "* Tasks"
                                         "** TODO Add initial Tasks"
                                         "** TODO %?"
                                         "* Dates"
                                         "* Contacts"))
                             ))))

    (setq org-roam-dailies-capture-templates
          '(
            ("d" "Today"
             plain (file (expand-file-name (concat org-directory "/templates/org-roam-dailies.org")))
             :if-new (file "%<%Y-%m-%d>.org")
             )

            ("e" "Email"
             entry "** TODO Respond to e-mail from %:fromname on %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n:PROPERTIES:\nCREATED: %U\n:END:\n %a"
             (file (expand-file-name (concat org-directory "/templates/org-roam-dailies.org")))
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Tasks")))

            ("p" "Phone Call"
             entry "** Phone call with %?"
             (file (expand-file-name (concat "/templates/org-roam-dailies.org")))
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Phone Calls")))

            ("m" "Meeting" entry "** Meeting with %?"
             (file (expand-file-name (concat org-directory "/templates/org-roam-dailies.org")))
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Meetings")))

            ("t" "Todo" entry "** TODO %?\n%a"
             (file (expand-file-name (concat org-directory "/templates/org-roam-dailies.org")))
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<Y-%m-%d>\n" ("Tasks")))

            ("$" "Trade"
             table-line
             "|%<%H:%M>|%^{Direction|BUY|SELL}|%^{Size|5}|%^{WL|WIN|LOSS}|%^{Gross}|%^{Commissions}|"
             :table-line-pos "II-1" ;; first line before the second horizontal separator line
             (file (expand-file-name (concat org-directory "/templates/org-roam-dailies.org")))
             :target (file+olp "%<%Y-%m-%d>.org" ("Trading" "Trade Details") )
             )
            ))

    (setq org-roam-capture-ref-templates
          '(
            ("r" "ref" plain "%?" :target (file+head "${slug}.org" "#+title: ${title}\n#+filetags: :BOOKMARK:") :unnarrowed t)

            ;; used by org-roam-protocol
            ;; look here too see how it is used: [[file:~/.qutebrowser/config.py][qutebrowser]]
            ("R" "ref" plain "%?"
             :target (file+head "web/${slug}.org" "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+filetags: :BOOKMARK:\n\n")
             :unnarrowed t)))

    ;; copy completed tasks too org-roam dailies
    (add-to-list 'org-after-todo-state-change-hook
                 (lambda ()
                   (when (equal org-state "DONE")
                     (my/org-roam-copy-todo-to-today))))
    )

#+end_src
* Vulpea

#+begin_src emacs-lisp :tangle yes

  ;; useful functions for manipulating org-mode files
  ;; https://github.com/d12frosted/vulpea
  ;;
  (use-package vulpea
    :ensure t
  :demand t
    :hook (org-roam-db-autosync-mode . vulpea-db-autosync-enable)
    :init
    (setq org-agenda-prefix-format
          '((agenda . " %i %-12(vulpea-agenda-category)%?-12t% s")
            (todo . " %i %-12(vulpea-agenda-category) ")
            (tags . " %i %-12(vulpea-agenda-category) ")
            (search . " %i %-12(ulpea-agenda-category) "))))
#+end_src

* Hyoerbole

{hyperbole-demo}
{hyperbole-web-search "Google" "emacs hyperbole"}

 #+begin_src emacs-lisp :tangle yes
  (use-package hyperbole
    :ensure t
    :config (hyperbole-mode 1))
#+end_src
* E-mail
#+begin_src emacs-lisp :tangle yes
  (use-package htmlize
    :load-path "/Users/ldangelo/emacs-scratch/packages/emacs-htmlize")
    (use-package org-msg
      :after mu4e
      :config
      (setq mail-user-agent 'mu4e-user-agent)

      (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
            org-msg-startup "hidestars indent inlineimages"
            org-msg-greeting-fmt "\nHi%s,\n\n"
  ;;          org-msg-recipient-names '(("jeremy.compostella@gmail.com" . "Jérémy"))
            org-msg-greeting-name-limit 3
            org-msg-default-alternatives '((new		. (text html))
                                           (reply-to-html	. (text html))
                                           (reply-to-text	. (text)))
            org-msg-convert-citation t)

      (org-msg-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
  ;;
  ;; setup e-mail mu4e
  (use-package mu4e
    :load-path "/usr/local/share/emacs/site-lisp/mu"
    :bind (("C-c m" . mu4e))
    :commands mu4e
    :config
    (setq
     send-mail-function 'message-send-mail-with-sendmail
     message-send-mail-function 'message-send-mail-with-sendmail
     sendmail-program "/usr/local/bin/msmtp"
     mu4e-send-messages-behavior 'delete
     mail-user-agent 'mu4e-user-agent
     mu4e-get-mail-command "offlineimap"
     ;;   org-mu4e-convert-to-html t
     )

    ;; use imagemagick, if available
    (setq mu4e-inboxes "maildir:/ OR maildir:/icloud/Inbox OR maildir:/Fortium/inbox)")
    (setq todays-unread-emails (concat mu4e-inboxes " AND date:today..now"))

    (setq mu4e-alert-interesting-mail-query todays-unread-emails)
    (setq fortium-signature "#+begin_signature\n--\n#+INCLUDE: ~/Documents/fortium-signature.html export html\n#+end_signature\n")
    (setq org-msg-signature fortium-signature)

    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "Fortium"
               :enter-func (lambda () (mu4e-message "Entering Fortium context"))
               :leave-func (lambda () (mu4e-message "Leaving Fortium context"))
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "^/Fortium" (mu4e-message-field msg :maildir))))
               :vars '( (user-mail-address . "leo.dangelo@fortiumpartners.com")
                        (user-full-name . "Leo D'Angelo")
                        (mu4e-compose-signature . t)
;;                        (message-signature-file . "~/Documents/fortium-signature.html")
;;                        (org-msg-signature . fortium-signature)
                        (mu4e-drafts-folder . "/Fortium/[Gmail].Drafts")
                        (mu4e-someday-folder . "/Fortium/Someday")
                        (mu4e-waiting-folder . "/Fortium/Waiting")
                        (mu4e-refile-folder . "/Fortium/Archived")
                        (mu4e-review-folder . "/Fortium/Review")
                        (mu4e-sent-folder . "/Fortium/[Gmail].Sent Mail")
                        (mu4e-trash-folder . "/Fortium/[Gmail].Trash")
                        (mu4e-update-interval . 1800)))
             ,(make-mu4e-context
               :name "icloud"
               :enter-func (lambda () (mu4e-message "Entering Fortium context"))
               :leave-func (lambda () (mu4e-message "Leaving Fortium context"))
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "^/icloud" (mu4e-message-field msg :maildir))))
               :vars '(
                       (user-email-address . "ldangelo@mac.com")
                       (user-full-name . "Leo D'Angelo")
                       (mu4e-compose-signature . "Leo A. D'Angelo\ne-mail: ldangelo@mac.com\ncell: (972) 979-0116")
                       (mu4e-drafts-folder . "/icloud/Drafts")
                       (mu4e-someday-folder . "/icloud/Someday")
                       (mu4e-waiting-folder . "/icloud/Waiting")
                       (mu4e-refile-folder . "/icloud/Archive")
                       (mu4e-review-folder . "/icloud/Review")
                       (mu4e-sent-folder . "/icloud/Sent")
                       (mu4e-trash-folder . "/icloud/Trash")
                       (mu4e-update-interval . 1800)))))



    ;; ;; use the standard bindings as a base
    (setq mu4e-bookmarks
          '( (:name "Unread Messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
             (:name "Today's messages" :query "date:1d.. AND NOT flag:trashed" :key ?a)
             (:name "Inbox messages" :query (lambda () (concat mu4e-inboxes))  :key ?i)
             (:name "Today's undeleted" :query (lambda () (concat mu4e-inboxes " date:today..now AND NOT flag:trashed")) :key ?A)
             (:name "Last 2 day's undeleted" :query (lambda () (concat mu4e-inboxes " date:2d..now AND NOT flag:trashed")) :key ?L)
             (:name "Last 7 day's undeleted" :query (lambda () (concat mu4e-inboxes " date:7d..now AND flag:unread AND NOT flag:trashed")) :key ?W)
             (:name "Flagged Messages" :query "flag:flagged"  :key ?g)
             (:name "Follow-up" :query "x:follow-up" :key ?f)
             (:name "Read Review" :query "x:read-review" :key ?r)
             )))

  (defun htmlize-and-send ()
    "When in an org-mu4e-compose-org-mode message, htmlize and send it."
    (interactive)
    (org-mime-htmlize))

  (defun mymu4e/header-mark-message(msg tags template)
    (mu4e-action-retag-message msg tags)
    (org-capture t template)
    (mu4e-headers-mark-for-refile))

  (defun mymu4e/mark-for-travel(msg)
    (interactive)
    (mu4e-action-retag-message msg "+Travel")
    (org-capture t "t")
    (mu4e-headers-mark-for-refile))

  (defun mymu4e/mark-for-todo (msg)
    (interactive)
    (mu4e-action-retag-message msg "+TODO")
    (org-capture t "t")
    (mu4e-headers-mark-for-refile))

  (defun mymu4e/mark-for-followup (msg)
    (interactive)
    (mu4e-action-retag-message msg "+RESPOND")
    (org-capture t "r")
    (mu4e-headers-mark-for-refile))


  (defun mymu4e/mark-for-reference (msg)
    (interactive)
    (mu4e-action-retag-message msg "+REFERENCE")
    (org-capture t "R")
    (mu4e-headers-mark-for-refile))

  (defun mymu4e/mark-for-read-review (msg)
    (interactive)
    (mu4e-action-retag-message msg "+READ")
    (mu4e-headers-mark-for-refile))

  (require 'mu4e-contrib)
  ;;  (add-to-list 'mu4e-headers-actions '("aSelect All" . mu4e-headers-mark-all))
  (add-to-list 'mu4e-headers-actions '("Tag" . mu4e-action-retag-message))
  (add-to-list 'mu4e-headers-actions '("tTodo" . mymu4e/mark-for-todo))
  (add-to-list 'mu4e-headers-actions '("vTravel" . mymu4e/mark-for-travel))
  (add-to-list 'mu4e-headers-actions '("RReference" . mymu4e/mark-for-reference))
  (add-to-list 'mu4e-headers-actions '("FFollow Up" . mymu4e/mark-for-followup))
  (add-to-list 'mu4e-headers-actions '("rRead-Review" . mymu4e/mark-for-read-review))
  (add-to-list 'mu4e-headers-actions '("fFilter by sender" . mu4e-headers-action-filter-by-sender))

  ;; (defadvice! mu4e-headers-rerun-search (before reindex-before-search)
  ;;   (mu4e-update-index))
  ;; (ad-activate 'mu4e-headers-rerun-search)

  (defun mu4e-headers-action-filter-by-sender (msg)
    "Search for all messages by the current sender"
    (let* ((sender (car-safe (mu4e-message-field msg :from)))
           (name (mu4e-contact-name sender))
           (email (mu4e-contact-email sender)))
      (message "name: %s address: %s" name email)
      (mu4e-headers-search (concat "not tag:Trash and from:" email) nil nil nil nil nil)))


  (defun my-string-width (str)
    "Return the width in pixels of a string in the current
            window's default font. If the font is mono-spaced, this
            will also be the width of all other printable characters."
    (let ((window (selected-window))
          (remapping face-remapping-alist))
      (with-temp-buffer
        (make-local-variable 'face-remapping-alist)
        (setq face-remapping-alist remapping)
        (set-window-buffer window (current-buffer))
        (insert str)
        (car (window-text-pixel-size)))))


  (cl-defun mu4e~normalised-icon (name &key set colour height v-adjust)
    "Convert :icon declaration to icon"
    (let* ((icon-set (intern (concat "all-the-icons-" (or set "faicon"))))
           (v-adjust (or v-adjust 0.02))
           (height (or height 0.8))
           (icon (if colour
                     (apply icon-set `(,name :face ,(intern (concat "all-the-icons-" colour)) :height ,height :v-adjust ,v-adjust))
                   (apply icon-set `(,name  :height ,height :v-adjust ,v-adjust))))
           (icon-width (my-string-width icon))
           (space-width (my-string-width " "))
           (space-factor (- 2 (/ (float icon-width) space-width))))
      (concat (propertize " " 'display `(space . (:width ,space-factor))) icon)))


  (defun mu4e~initialise-icons ()
    (setq mu4e-use-fancy-chars t
          mu4e-headers-draft-mark      (cons "D" (mu4e~normalised-icon "pencil"))
          mu4e-headers-flagged-mark    (cons "F" (mu4e~normalised-icon "flag"))
          mu4e-headers-new-mark        (cons "N" (mu4e~normalised-icon "sync" :set "material" :height 0.8 :v-adjust -0.10))
          mu4e-headers-passed-mark     (cons "P" (mu4e~normalised-icon "arrow-right"))
          mu4e-headers-replied-mark    (cons "R" (mu4e~normalised-icon "arrow-right"))
          mu4e-headers-seen-mark       (cons "S" (mu4e~normalised-icon "eye" :height 0.6 :v-adjust 0.07 :colour "dsilver"))
          mu4e-headers-trashed-mark    (cons "T" (mu4e~normalised-icon "trash"))
          mu4e-headers-attach-mark     (cons "a" (mu4e~normalised-icon "file-text-o" :colour "silver"))
          mu4e-headers-encrypted-mark  (cons "x" (mu4e~normalised-icon "lock"))
          mu4e-headers-signed-mark     (cons "s" (mu4e~normalised-icon "certificate" :height 0.7 :colour "dpurple"))
          mu4e-headers-unread-mark     (cons "u" (mu4e~normalised-icon "eye-slash" :v-adjust 0.05)))

    (if (display-graphic-p)
        (mu4e~initialise-icons)
      ;; When it's the server, wait till the first graphical frame
      (add-hook! 'server-after-make-frame-hook
                 (defun mu4e~initialise-icons-hook ()
                   (when (display-graphic-p)
                     (mu4e~initialise-icons)
                     (remove-hook #'mu4e~initialise-icons-hook))))))

  (defun mu4e-header-colourise (str)
    (let* ((str-sum (apply #'+ (mapcar (lambda (c) (% c 3)) str)))
           (colour (nth (% str-sum (length mu4e-header-colourised-faces))
                        mu4e-header-colourised-faces)))
      (put-text-property 0 (length str) 'face colour str)
      str))


(setq mu4e-headers-fields
        '((:human-date . 12)
          (:from . 25)
          (:to . 20)
          (:recipnum . 2)
          (:flags . 6)
          (:tags . 10)
          (:subject)))


  (general-def 'normal mu4e-headers-mode-map
    (kbd "M") #'mu4e-headers-mark-all)

  (general-def 'normal  mu4e-headers-mode-map
    "M" #'mu4e-headers-mark-all
    "*" #'mu4e-headers-mark-for-something
    "!" #'mu4e-headers-mark-for-read
    "?" #'mu4e-headers-mark-for-unread
    "u" #'mu4e-headers-mark-for-unread)




  (defun mu4e~main-action-prettier-str (str &optional func-or-shortcut)
    "Highlight the first occurrence of [.] in STR.
            If FUNC-OR-SHORTCUT is non-nil and if it is a function, call it
            when STR is clicked (using RET or mouse-2); if FUNC-OR-SHORTCUT is
            a string, execute the corresponding keyboard action when it is
            clicked."
    :override #'mu4e~main-action-str
    (let ((newstr
           (replace-regexp-in-string
            "\\[\\(..?\\)\\]"
            (lambda(m)
              (format "%s"
                      (propertize (match-string 1 m) 'face '(mode-line-emphasis bold))))
            (replace-regexp-in-string "\t\\*" "\t⚫" str)))
          (map (make-sparse-keymap))
          (func (if (functionp func-or-shortcut)
                    func-or-shortcut
                  (if (stringp func-or-shortcut)
                      (lambda()(interactive)
                        (execute-kbd-macro func-or-shortcut))))))
      (define-key map [mouse-2] func)
      (define-key map (kbd "RET") func)
      (put-text-property 0 (length newstr) 'keymap map newstr)
      (put-text-property (string-match "[A-Za-z].+$" newstr)
                         (- (length newstr) 1) 'mouse-face 'highlight newstr)
      newstr))

  (use-package mu4e-alert
    :ensure t
    :hook (mu4e-index-updated . mu4e-alert-enable-notifications)
    :config
    (mu4e-alert-set-default-style 'notifier))
#+end_src
* Key Map
** Evil
#+begin_src emacs-lisp :tangle yes
  (use-package evil
    :after (general)
    :init
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init)
    (general-evil-setup 1))

  ;;  (use-package evil-mu4e :after mu4e)


  (global-set-key  (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :ensure t
    :after evil
    :config
    (general-create-definer leader-def
      :keymaps '(normal insert motion emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC")
    (leader-def "" nil)
    (general-def universal-argument-map
      "SPC u" 'universal-argument-more)

    (leader-def
      "," '(major-mode-hydra :which-key "Major leader")
      "b" '(:ignore t :which-key "Buffers")
      "bk" '(kill-this-buffer :which-key "Kill")
      "bo" '(ace-window :which-key "Other")
      "bi" '(ibuffer :which-key "List") 
      "f" '(:ignore t :which-key "Files")
      "fd" 'init-file
      "ff" 'find-file
      "fs" 'save-buffer
      "bb" 'switch-to-buffer
      "q" '(:ignore t :which-key "Quit")
      "qq" '(evil-save-and-quit :which-key "Save and quit")))

#+end_src
** Multistate
#+begin_src emacs-lisp :tangle no
    (use-package multistate
      :hook
      ;; enable selection is Visual state
      (multistate-visual-state-enter . (lambda () (set-mark (point))))
      (multistate-visual-state-exijjt .  deactivate-mark)
      ;; enable overwrite-mode in Replace state
      (multistate-replace-state-enter . overwrite-mode)
      (multistate-replace-state-exit .  (lambda () (overwrite-mode 0)))
      :init
      ;; Emacs state
      (multistate-define-state 'emacs :lighter "E")
      ;; Insert state
      (multistate-define-state
       'insert
       :lighter "I"
       :cursor 'bar
       :parent 'multistate-emacs-state-map)
      ;; Normal state
      (multistate-define-state
       'normal
       :lighter "N"
       :default t
       :cursor 'hollow
       :parent 'multistate-suppress-map)

      ;; Enable multistate-mode globally
      (multistate-global-mode 1)
      :bind
      (:map multistate-emacs-state-map
            ("C-z" . multistate-normal-state))
      (:map multistate-insert-state-map
            ("<ESC>" . multistate-normal-state))
      (:map multistate-normal-state-map
            ("C-z" . multistate-emacs-state)
            ("i" . multistate-insert-state)
            ("/" . search-forward)
            ("?" . search-backward)
            ("x" . delete-char)
            ("X" . backward-delete-char)
            ("`" . multistate-normal-state)
            ("h" . backward-char)
            ("e" . next-line)
            ("a" . previous-line)
            ("t" . forward-char)
            ("yy" . yank-line)
            ("dd" . delete-line)
            ("0" . move-beginning-of-line)
            ("$" . move-end-of-line)
            ("gg" . beginning-of-buffer)
            ("G" . end-of-buffer)
  ("<SPC>" . leader/body)
            ("<ESC>" . multistate-normal-state)))

#+end_src
** Meow Mode
#+begin_src emacs-lisp :tangle no
      (defun meow-setup ()
      (message "Meow running")
    ;;  (setq meow-cheatsheet-physical-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       '("i" . imenu)
       '("b" . consult-buffer)
       '("k" . kill-current-buffer)
       '("SPC" . "M-x")
       '("s" . split-window-below)
  ;;     '("w" . ace-window)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))

    (use-package meow
      :ensure t
      :init
      (meow-global-mode 1)
      :config
      (meow-setup)
      (meow-setup-indicator)
      ;;  (setq meow-keypad-leader-dispatch "C-c")
      (setq meow-use-clipboard t))

    (provide 'init-meow)


#+end_src

* El Feed
#+begin_src emacs-lisp :tangle yes
                      (defun elfeed-show-eww-open (&optional use-generic-p)
                        "open with eww"
                        (interactive "P")
                        (let ((browse-url-handlers ("http[s]://*" . eww-browse-url))
                          (elfeed-show-visit use-generic-p))))

                      (defun browse-url-default-macosx-browser (url &optional new-window)
                        (interactive (browse-url-interactive-arg "URL: "))
                        (if (and new-window (>= emacs-major-version 23))
                            (ns-do-applescript
                             (format (concat "tell application \"Safari\" to make document with properties {URL:\"%s\"}\n"
                                     "tell application \"Safari\" to activate") url))
                          (start-process (concat "open " url) nil "open" url)))

                      (defun elfeed-search-eww-open (&optional use-generic-p)
                        "open with eww"
                        (interactive "P")
                        (let ((browse-url-handlers ("http[s]://*" . eww-browse-url))
                          (elfeed-search-browse-url use-generic-p))))

                      (defun browse-url-mpv (url &optional single)
                        (start-process "mpv" nil "mpv" (shell-quote-argument url)))  

            (use-package elfeed
                    :bind ("C-c f")
                    :hook elfeed-search-mode-hook elfeed-update
                    :config
                      (setq  elfeed-goodies/entry-pane-position 'bottom)
                      (setq elfeed-goodies/feed-source-column-width 32)
                      (setq elfeed-search-title-min-width 32)
                      (setq browse-url-handlers
                            '(("https:\\/\\/www\\.youtu\\.*be." . browse-url-mpv)
                              ("." . browse-url-default-macosx-browser)))
                    )

            ;;          (add-hook 'elfeed-search-mode-hook #'elfeed-update)


              
                      ;;(setq-hook! 'elfeed-search-mode-hook browse-url-handlers '(("." . #'eww-browse-url)))
                      ;;(setq-hook! 'elfeed-show-mode-hook browse-url-handlers '(("." . xwwp-browse-url-other-window)))

                      ;; download youtube urls with mpv instead of eww

      (use-package elfeed-org
        :config
        (setq rmh-elfeed-org-files (list (concat org-directory "/elfeed.org")))
        (elfeed-org))
#+end_src
* WGrep
https://github.com/mhayashi1120/Emacs-wgrep

#+begin_src emacs-lisp :tangle yes
    (use-package wgrep
      :ensure t)

#+end_src
* Dired
#+begin_src emacs-lisp :tangle yes
  
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")))

#+end_src
* Programming
** General
#+begin_src emacs-lisp :tangle yes


;; Prettify Symbols
;; e.g. display “lambda” as “λ”
(use-package prog-mode
  :ensure nil
  :hook (prog-mode . prettify-symbols-mode))



;; Tree-sitter support

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

;; Show function arglist or variable docstring
(use-package eldoc
  :ensure nil
  :diminish
  :config
  (when (childframe-workable-p)
    (use-package eldoc-box
      :diminish (eldoc-box-hover-mode eldoc-box-hover-at-point-mode)
      :custom
      (eldoc-box-lighter nil)
      (eldoc-box-only-multi-line t)
      (eldoc-box-clear-with-C-g t)
      :custom-face
      (eldoc-box-border ((t (:inherit posframe-border :background unspecified))))
      (eldoc-box-body ((t (:inherit tooltip))))
;;      :hook ((eglot-managed-mode . eldoc-box-hover-at-point-mode))
      :config
      ;; Prettify `eldoc-box' frame
      (setf (alist-get 'left-fringe eldoc-box-frame-parameters) 8
            (alist-get 'right-fringe eldoc-box-frame-parameters) 8))))

;; Search tool
(use-package grep
  :ensure nil
  :autoload grep-apply-setting
  :init
  (when (executable-find "rg")
    (grep-apply-setting
     'grep-command "rg --color=auto --null -nH --no-heading -e ")
    (grep-apply-setting
     'grep-template "rg --color=auto --null --no-heading -g '!*/' -e <R> <D>")
    (grep-apply-setting
     'grep-find-command '("rg --color=auto --null -nH --no-heading -e ''" . 38))
    (grep-apply-setting
     'grep-find-template "rg --color=auto --null -nH --no-heading -e <R> <D>")))

;; Cross-referencing commands
(use-package xref
  :bind (("M-g ." . xref-find-definitions)
         ("M-g ," . xref-go-back))
  :init
  ;; Use faster search tool
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))

  ;; Select from xref candidates in minibuffer
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read
        xref-show-xrefs-function #'xref-show-definitions-completing-read))

;; Jump to definition
(use-package dumb-jump
  :pretty-hydra
  ((:title (pretty-hydra-title "Dump Jump" 'faicon "nf-fa-anchor")
           :color blue :quit-key ("q" "C-g"))
   ("Jump"
    (("j" dumb-jump-go "Go")
     ("o" dumb-jump-go-other-window "Go other window")
     ("e" dumb-jump-go-prefer-external "Go external")
     ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))
    "Other"
    (("i" dumb-jump-go-prompt "Prompt")
     ("l" dumb-jump-quick-look "Quick look")
     ("b" dumb-jump-back "Back"))))
  :bind (("C-M-j" . dumb-jump-hydra/body))
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq dumb-jump-selector 'completing-read))

;; Code styles
(use-package editorconfig
  :diminish
  :hook (after-init . editorconfig-mode))

;; Run commands quickly
(use-package quickrun
  :bind (("C-<f5>" . quickrun)
         ("C-c X"  . quickrun)))

;; Browse devdocs.io documents using EWW
;; (use-package devdocs
;;   :autoload (devdocs--installed-docs devdocs--available-docs)
;;   :bind (:map prog-mode-map
;;               ("M-<f1>" . devdocs-dwim)
;;               ("C-h D"  . devdocs-dwim))
;;   :init
;;   (defconst devdocs-major-mode-docs-alist
;;     '((c-mode          . ("c"))
;;       (c++-mode        . ("cpp"))
;;       (python-mode     . ("python~3.10" "python~2.7"))
;;       (ruby-mode       . ("ruby~3.1"))

;;       (rustic-mode     . ("rust"))
;;       (css-mode        . ("css"))
;;       (html-mode       . ("html"))
;;       (julia-mode      . ("julia~1.8"))
;;       (js-mode         . ("javascript" "jquery"))
;;       (js2-mode        . ("javascript" "jquery"))
;;       (emacs-lisp-mode . ("elisp")))
;;     "Alist of major-mode and docs.")

;;   (mapc
;;    (lambda (mode)
;;      (add-hook (intern (format "%s-hook" (car mode)))
;;                (lambda ()
;;                  (setq-local devdocs-current-docs (cdr mode)))))
;;    devdocs-major-mode-docs-alist)

;;   (setq devdocs-data-dir (expand-file-name "devdocs" user-emacs-directory))

;;   (defun devdocs-dwim()
;;     "Look up a DevDocs documentation entry.

;; Install the doc if it's not installed."
;;     (interactive)
;;     ;; Install the doc if it's not installed
;;     (mapc
;;      (lambda (slug)
;;        (unless (member slug (let ((default-directory devdocs-data-dir))
;;                               (seq-filter #'file-directory-p
;;                                           (when (file-directory-p devdocs-data-dir)
;;                                             (directory-files "." nil "^[^.]")))))
;;          (mapc
;;           (lambda (doc)
;;             (when (string= (alist-get 'slug doc) slug)
;;               (devdocs-install doc)))
;;           (devdocs--available-docs))))
;;      (alist-get major-mode devdocs-major-mode-docs-alist))

;;     ;; Lookup the symbol at point
;;     (devdocs-lookup nil (thing-at-point 'symbol t))))

;; Misc. programming modes

(use-package protobuf-mode
  :hook (protobuf-mode . (lambda ()
                           (setq imenu-generic-expression
                                 '((nil "^[[:space:]]*\\(message\\|service\\|enum\\)[[:space:]]+\\([[:alnum:]]+\\)" 2))))))

(use-package nxml-mode
  :ensure nil
  :mode (("\\.xaml$" . xml-mode)))

;; Fish shell
(use-package fish-mode
  :hook (fish-mode . (lambda ()
                       (add-hook 'before-save-hook
                                 #'fish_indent-before-save))))

(provide 'init-prog)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-prog.el ends here


#+end_src
** Smex
Allow easier execution of commands

#+begin_src emacs-lisp :tangle yes
(use-package smex
  :ensure t
  ;; Using counsel-M-x for now. Remove this permanently if counsel-M-x works better.
  :disabled t
  :config
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  :bind ("M-x" . smex))
#+end_src
** Paredit
#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :ensure t
    :init
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    :config
    (show-paren-mode t)
    :bind (("M-[" . paredit-wrap-square)
           ("M-{" . paredit-wrap-curly))
    :diminish nil)


#+end_src
** Eldoc
#+begin_src emacs-lisp :tangle yes
(use-package eldoc
  :preface
   (add-to-list 'display-buffer-alist
               '("^\\*eldoc for" display-buffer-at-bottom
                 (window-height . 4)))
   (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  :config
   (eldoc-add-command-completions "paredit-")
   (eldoc-add-command-completions "combobulate-"))

#+end_src
** Source code control
*** Diff Highlight
https://github.com/dgutov/diff-hl
#+begin_src emacs-lisp :tangle yes
     (use-package diff-hl
     :config
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode))
#+end_src
*** Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit)

#+end_src
*** Magit TODO
#+begin_src emacs-lisp :tangle yes
  (use-package magit-todos
  :after magit
  :config (magit-todos-mode 1))
#+end_src
*** Magit git-flow
#+begin_src emacs-lisp :tangle yes
  (use-package magit-gitflow
    :init (setq magit-gitflow-popup-key "C-f")
    :ensure t
    :config (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

#+end_src

** IDE
*** Projectile

#+begin_src emacs-lisp :tangle yes

    (use-package projectile
      :ensure t
      :config
      ;; setup keymap for projectile
      (general-create-definer lad/projectile-command-map :prefix "C-c p" :which-key "Projectile")
      (lad/projectile-command-map
        "f" '(projectile-find-file :wk "Find File")
        "c" '(projectile-run-shell-command-in-root :wk "Shell Command")
        "s" '(projectile-run-shell :wk "Shell")
        "p" '(projectile-switch-project :wk "Switch Project"))
      (projectile-mode +1))

#+end_src
*** LSP
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :ensure t
  :diminish
  :autoload lsp-enable-which-key-integration
  :init
  (setq lsp-keymap-prefix "C-c l"
        lsp-keep-workspace-alive nil
        lsp-signature-auto-activate nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil

        lsp-semantic-tokens-enable t
        lsp-progress-spinner-type 'progress-bar-filled

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-symbol-highlighting nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil

        ;; For diagnostics
        lsp-diagnostics-disabled-modes '(markdown-mode gfm-mode)

        ;; For clients
        lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         ;;         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp-format-buffer lsp-organize-imports
  :config
  (use-package consult-lsp
    :bind (:map lsp-mode-map
                ("C-M-." . consult-lsp-symbols)))

  (with-no-warnings
    ;; Disable `lsp-mode' in `git-timemachine-mode'
    (defun my-lsp--init-if-visible (fn &rest args)
      (unless (bound-and-true-p git-timemachine-mode)
        (apply fn args)))
    (advice-add #'lsp--init-if-visible :around #'my-lsp--init-if-visible)

    ;; Enable `lsp-mode' in sh/bash/zsh
    (defun my-lsp-bash-check-sh-shell (&rest _)
      (and (memq major-mode '(sh-mode bash-ts-mode))
           (memq sh-shell '(sh bash zsh))))
    (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)
    (add-to-list 'lsp-language-id-configuration '(bash-ts-mode . "shellscript"))

    ;; Display icons
    (when (icons-displayable-p)
      (defun my-lsp-icons-get-symbol-kind (fn &rest args)
        (and (icons-displayable-p) (apply fn args)))
      (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)

      ;; For `lsp-headerline'
      (defun my-lsp-icons-get-by-file-ext (fn &rest args)
        (and (icons-displayable-p) (apply fn args)))
      (advice-add #'lsp-icons-get-by-file-ext :around #'my-lsp-icons-get-by-file-ext)

      (defun my-lsp-icons-get-by-file-ext (file-ext &optional feature)
        (when (and file-ext
                   (lsp-icons--enabled-for-feature feature))
          (nerd-icons-icon-for-extension file-ext)))
      (advice-add #'lsp-icons-get-by-file-ext :override #'my-lsp-icons-get-by-file-ext)

      (defvar lsp-symbol-alist
        '((misc          nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-warning-face)
          (document      nerd-icons-codicon "nf-cod-symbol_file" :face font-lock-string-face)
          (namespace     nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-type-face)
          (string        nerd-icons-codicon "nf-cod-symbol_string" :face font-lock-doc-face)
          (boolean-data  nerd-icons-codicon "nf-cod-symbol_boolean" :face font-lock-builtin-face)
          (numeric       nerd-icons-codicon "nf-cod-symbol_numeric" :face font-lock-builtin-face)
          (method        nerd-icons-codicon "nf-cod-symbol_method" :face font-lock-function-name-face)
          (field         nerd-icons-codicon "nf-cod-symbol_field" :face font-lock-variable-name-face)
          (localvariable nerd-icons-codicon "nf-cod-symbol_variable" :face font-lock-variable-name-face)
          (class         nerd-icons-codicon "nf-cod-symbol_class" :face font-lock-type-face)
          (interface     nerd-icons-codicon "nf-cod-symbol_interface" :face font-lock-type-face)
          (property      nerd-icons-codicon "nf-cod-symbol_property" :face font-lock-variable-name-face)
          (indexer       nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
          (enumerator    nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
          (enumitem      nerd-icons-codicon "nf-cod-symbol_enum_member" :face font-lock-builtin-face)
          (constant      nerd-icons-codicon "nf-cod-symbol_constant" :face font-lock-constant-face)
          (structure     nerd-icons-codicon "nf-cod-symbol_structure" :face font-lock-variable-name-face)
          (event         nerd-icons-codicon "nf-cod-symbol_event" :face font-lock-warning-face)
          (operator      nerd-icons-codicon "nf-cod-symbol_operator" :face font-lock-comment-delimiter-face)
          (template      nerd-icons-codicon "nf-cod-symbol_snippet" :face font-lock-type-face)))

      (defun my-lsp-icons-get-by-symbol-kind (kind &optional feature)
        (when (and kind
                   (lsp-icons--enabled-for-feature feature))
          (let* ((icon (cdr (assoc (lsp-treemacs-symbol-kind->icon kind) lsp-symbol-alist)))
                 (args (cdr icon)))
            (apply (car icon) args))))
      (advice-add #'lsp-icons-get-by-symbol-kind :override #'my-lsp-icons-get-by-symbol-kind)

      (setq lsp-headerline-arrow (nerd-icons-octicon "nf-oct-chevron_right"
                                                     :face 'lsp-headerline-breadcrumb-separator-face)))))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(provide 'init-lsp)

#+end_src
*** Dap
#+begin_src emacs-lisp :tangle yes
(use-package dape
  :bind (("<f5>" . dape)
         ("M-<f5>" . dape-hydra/body))
  :custom (dape-buffer-window-arrangment 'right)
  :pretty-hydra
  ((:title (pretty-hydra-title "Debug" 'codicon "nf-cod-debug")
           :color pink :quit-key ("q" "C-g"))
   ("Stepping"
    (("n" dape-next "next")
     ("s" dape-step-in "step in")
     ("o" dape-step-out "step out")
     ("c" dape-continue "continue")
     ("p" dape-pause "pause")
     ("k" dape-kill "kill")
     ("r" dape-restart "restart")
     ("D" dape-disconnect-quit "disconnect"))
    "Switch"
    (("m" dape-read-memory "memory")
     ("t" dape-select-thread "thread")
     ("w" dape-watch-dwim "watch")
     ("S" dape-select-stack "stack")
     ("i" dape-info "info")
     ("R" dape-repl "repl"))
    "Breakpoints"
    (("b" dape-breakpoint-toggle "toggle")
     ("l" dape-breakpoint-log "log")
     ("e" dape-breakpoint-expression "expression")
     ("B" dape-breakpoint-remove-all "clear"))
    "Debug"
    (("d" dape "dape")
     ("Q" dape-quit "quit" :exit t))))
  :config
  ;; Save buffers on startup, useful for interpreted languages
  (add-hook 'dape-on-start-hooks
            (defun dape--save-on-start ()
              (save-some-buffers t t)))
  ;; Display hydra on startup
  (add-hook 'dape-on-start-hooks #'dape-hydra/body))

(provide 'init-dap)

#+end_src
*** Nix
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :mode ("\\.nix\\'" "\\.nix.in\\'"))
(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")
(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))
#+end_src
*** Emacs Lisp
#+begin_src emacs-lisp :tangle yes
  (use-package lispy)


  (major-mode-hydra-define emacs-lisp-mode nil
  ("Eval"
   (("b" eval-buffer "buffer")
    ("e" eval-defun "defun")
    ("r" eval-region "region"))
   "REPL"
   (("I" ielm "ielm"))
   "Test"
   (("t" ert "prompt")
    ("T" (ert t) "all")
    ("F" (ert :failed) "failed"))
   "Doc"
   (("d" describe-foo-at-point "thing-at-pt")
    ("f" describe-function "function")
    ("v" describe-variable "variable")
    ("i" info-lookup-symbol "info lookup"))))
#+end_src
*** Rust
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :ensure t
  ;; turn on lsp
  :hook (rust-mode . lsp))

(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
		      ("M-j" . lsp-ui-imenu)
		      ("M-?" . lsp-find-references)
		      ("C-c C-c l" . flycheck-list-errors)
		      ("C-c C-c a" . lsp-execute-code-action)
		      ("C-c C-c r" . lsp-rename)
		      ("C-c C-c q" . lsp-workspace-restart)
		      ("C-c C-c Q" . lsp-workspace-shutdown)
		      ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))


(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-inlay-hint-enable t)
  ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))

(use-package dap-mode
  :ensure
  :config
  (dap-ui-mode)
  (dap-ui-controls-mode 1)

  (require 'dap-lldb)
  (require 'dap-gdb-lldb)
  ;; installs .extension/vscode
  (dap-gdb-lldb-setup)
  (dap-register-debug-template
   "Rust::LLDB Run Configuration"
   (list :type "lldb"
	     :request "launch"
	     :name "LLDB::Run"
	     :gdbpath "rust-lldb"
	     :target nil
	     :cwd nil)))

(provide 'init-rust)

#+end_src
*** Lua
#+begin_src emacs-lisp :tangle yes
(use-package lua-mode
  :defer t
  :init
  (setq lua-indent-level 2)
  :config
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))

;; LSP support for lua

(provide 'init-lua)
  

#+end_src

*** Clojure
#+begin_src emacs-lisp :tangle yes
    (use-package cider
      :ensure t)

#+end_src
*** DotNet
#+begin_src emacs-lisp :tangle yes
  (defun csharp-setup-backend ()
    
    (add-hook 'csharp-mode-hook 'omnisharp-mode))

  (defun csharp-configure ()
    ;; setup mode specific keymaps
    )

  (use-package omnisharp
    :defer t
    :init
    (csharp-setup-backend)
    :config
    (csharp-configure))  

#+end_src
